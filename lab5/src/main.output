Terminals unused in grammar

    TRUE
    FALSE
    CONST
    UMINUS
    UADD


State 50 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: statements

    2 statements: statement
    3           | statements statement

    4 statement: SEMICOLON
    5          | declaration SEMICOLON
    6          | assignment_expr SEMICOLON
    7          | if_else
    8          | iteration_Stmt
    9          | jump_Stmt
   10          | compound_Stmt
   11          | printf SEMICOLON
   12          | scanf SEMICOLON
   13          | function_Definition
   14          | function_Call

   15 function_Call: IDENTIFIER LP id_list RP
   16              | IDENTIFIER LP RP

   17 function_Definition: T IDENTIFIER LP declaration RP compound_Stmt
   18                    | T IDENTIFIER LP RP compound_Stmt

   19 compound_Stmt: LC statements RC
   20              | LC RC

   21 if_else: IF LP expr RP compound_Stmt
   22        | IF LP expr RP compound_Stmt ELSE compound_Stmt

   23 iteration_Stmt: WHILE LP expr RP compound_Stmt
   24               | FOR LP expr SEMICOLON expr SEMICOLON expr RP compound_Stmt
   25               | FOR LP expr SEMICOLON expr SEMICOLON RP compound_Stmt

   26 jump_Stmt: CONTINUE SEMICOLON
   27          | BREAK SEMICOLON
   28          | RETURN expr SEMICOLON
   29          | RETURN SEMICOLON

   30 printf: PRINTF LP expr RP
   31       | PRINTF LP STRING COMMA io_list RP

   32 scanf: SCANF LP expr RP
   33      | SCANF LP STRING COMMA io_list RP

   34 io_list: expr
   35        | io_list COMMA expr

   36 declaration: T IDENTIFIER ASSIGN additive_expr
   37            | declaration COMMA IDENTIFIER
   38            | T IDENTIFIER

   39 id_list: IDENTIFIER
   40        | id_list COMMA IDENTIFIER

   41 expr: condition_expr
   42     | assignment_expr
   43     | declaration

   44 condition_expr: logical_or_expr

   45 logical_or_expr: logical_and_expr
   46                | logical_or_expr OR logical_and_expr

   47 logical_and_expr: equality_expr
   48                 | logical_and_expr AND equality_expr

   49 equality_expr: relation_expr
   50              | equality_expr EQ relation_expr
   51              | equality_expr NEQ relation_expr

   52 relation_expr: additive_expr
   53              | relation_expr LT additive_expr
   54              | relation_expr LQT additive_expr
   55              | relation_expr GT additive_expr
   56              | relation_expr GQT additive_expr

   57 assignment_expr: unary_expr ASSIGN additive_expr
   58                | unary_expr ADD_ASSIGN additive_expr
   59                | unary_expr SUB_ASSIGN additive_expr
   60                | unary_expr MUL_ASSIGN additive_expr
   61                | unary_expr DIV_ASSIGN additive_expr

   62 additive_expr: mult_expr
   63              | additive_expr ADD mult_expr
   64              | additive_expr SUB mult_expr

   65 mult_expr: cast_expr
   66          | mult_expr MUL cast_expr
   67          | mult_expr DIV cast_expr
   68          | mult_expr MODE cast_expr

   69 cast_expr: unary_expr

   70 unary_expr: postfix_expr
   71           | SUB cast_expr
   72           | NOT cast_expr
   73           | REFERENCE cast_expr

   74 postfix_expr: primary_expr
   75             | postfix_expr INC
   76             | postfix_expr DEC

   77 primary_expr: IDENTIFIER
   78             | paperConst
   79             | LP expr RP

   80 paperConst: INTEGER
   81           | CHAR
   82           | STRING
   83           | BOOL

   84 T: T_INT
   85  | T_CHAR
   86  | T_BOOL
   87  | T_STRING
   88  | T_VOID


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    T_CHAR (258) 85
    T_INT (259) 84
    T_STRING (260) 87
    T_BOOL (261) 86
    T_VOID (262) 88
    TRUE (263)
    FALSE (264)
    ASSIGN (265) 36 57
    ADD_ASSIGN (266) 58
    SUB_ASSIGN (267) 59
    MUL_ASSIGN (268) 60
    DIV_ASSIGN (269) 61
    EQ (270) 50
    NEQ (271) 51
    GQT (272) 56
    LQT (273) 54
    GT (274) 55
    LT (275) 53
    ADD (276) 63
    SUB (277) 64 71
    MUL (278) 66
    DIV (279) 67
    MODE (280) 68
    INC (281) 75
    DEC (282) 76
    AND (283) 48
    OR (284) 46
    NOT (285) 72
    PRINTF (286) 30 31
    SCANF (287) 32 33
    REFERENCE (288) 73
    CONST (289)
    SEMICOLON (290) 4 5 6 11 12 24 25 26 27 28 29
    COMMA (291) 31 33 35 37 40
    LP (292) 15 16 17 18 21 22 23 24 25 30 31 32 33 79
    RP (293) 15 16 17 18 21 22 23 24 25 30 31 32 33 79
    LC (294) 19 20
    RC (295) 19 20
    WHILE (296) 23
    ELSE (297) 22
    IF (298) 21 22
    RETURN (299) 28 29
    FOR (300) 24 25
    CONTINUE (301) 26
    BREAK (302) 27
    IDENTIFIER (303) 15 16 17 18 36 37 38 39 40 77
    INTEGER (304) 80
    CHAR (305) 81
    BOOL (306) 83
    STRING (307) 31 33 82
    UMINUS (308)
    UADD (309)
    LOWER_THEN_ELSE (310)


Nonterminals, with rules where they appear

    $accept (56)
        on left: 0
    program (57)
        on left: 1
        on right: 0
    statements (58)
        on left: 2 3
        on right: 1 3 19
    statement (59)
        on left: 4 5 6 7 8 9 10 11 12 13 14
        on right: 2 3
    function_Call (60)
        on left: 15 16
        on right: 14
    function_Definition (61)
        on left: 17 18
        on right: 13
    compound_Stmt (62)
        on left: 19 20
        on right: 10 17 18 21 22 23 24 25
    if_else (63)
        on left: 21 22
        on right: 7
    iteration_Stmt (64)
        on left: 23 24 25
        on right: 8
    jump_Stmt (65)
        on left: 26 27 28 29
        on right: 9
    printf (66)
        on left: 30 31
        on right: 11
    scanf (67)
        on left: 32 33
        on right: 12
    io_list (68)
        on left: 34 35
        on right: 31 33 35
    declaration (69)
        on left: 36 37 38
        on right: 5 17 37 43
    id_list (70)
        on left: 39 40
        on right: 15 40
    expr (71)
        on left: 41 42 43
        on right: 21 22 23 24 25 28 30 32 34 35 79
    condition_expr (72)
        on left: 44
        on right: 41
    logical_or_expr (73)
        on left: 45 46
        on right: 44 46
    logical_and_expr (74)
        on left: 47 48
        on right: 45 46 48
    equality_expr (75)
        on left: 49 50 51
        on right: 47 48 50 51
    relation_expr (76)
        on left: 52 53 54 55 56
        on right: 49 50 51 53 54 55 56
    assignment_expr (77)
        on left: 57 58 59 60 61
        on right: 6 42
    additive_expr (78)
        on left: 62 63 64
        on right: 36 52 53 54 55 56 57 58 59 60 61 63 64
    mult_expr (79)
        on left: 65 66 67 68
        on right: 62 63 64 66 67 68
    cast_expr (80)
        on left: 69
        on right: 65 66 67 68 71 72 73
    unary_expr (81)
        on left: 70 71 72 73
        on right: 57 58 59 60 61 69
    postfix_expr (82)
        on left: 74 75 76
        on right: 70 75 76
    primary_expr (83)
        on left: 77 78 79
        on right: 74
    paperConst (84)
        on left: 80 81 82 83
        on right: 78
    T (85)
        on left: 84 85 86 87 88
        on right: 17 18 36 38


State 0

    0 $accept: . program $end

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    PRINTF      shift, and go to state 8
    SCANF       shift, and go to state 9
    REFERENCE   shift, and go to state 10
    SEMICOLON   shift, and go to state 11
    LP          shift, and go to state 12
    LC          shift, and go to state 13
    WHILE       shift, and go to state 14
    IF          shift, and go to state 15
    RETURN      shift, and go to state 16
    FOR         shift, and go to state 17
    CONTINUE    shift, and go to state 18
    BREAK       shift, and go to state 19
    IDENTIFIER  shift, and go to state 20
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    program              go to state 25
    statements           go to state 26
    statement            go to state 27
    function_Call        go to state 28
    function_Definition  go to state 29
    compound_Stmt        go to state 30
    if_else              go to state 31
    iteration_Stmt       go to state 32
    jump_Stmt            go to state 33
    printf               go to state 34
    scanf                go to state 35
    declaration          go to state 36
    assignment_expr      go to state 37
    unary_expr           go to state 38
    postfix_expr         go to state 39
    primary_expr         go to state 40
    paperConst           go to state 41
    T                    go to state 42


State 1

   85 T: T_CHAR .

    $default  reduce using rule 85 (T)


State 2

   84 T: T_INT .

    $default  reduce using rule 84 (T)


State 3

   87 T: T_STRING .

    $default  reduce using rule 87 (T)


State 4

   86 T: T_BOOL .

    $default  reduce using rule 86 (T)


State 5

   88 T: T_VOID .

    $default  reduce using rule 88 (T)


State 6

   71 unary_expr: SUB . cast_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    cast_expr     go to state 44
    unary_expr    go to state 45
    postfix_expr  go to state 39
    primary_expr  go to state 40
    paperConst    go to state 41


State 7

   72 unary_expr: NOT . cast_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    cast_expr     go to state 46
    unary_expr    go to state 45
    postfix_expr  go to state 39
    primary_expr  go to state 40
    paperConst    go to state 41


State 8

   30 printf: PRINTF . LP expr RP
   31       | PRINTF . LP STRING COMMA io_list RP

    LP  shift, and go to state 47


State 9

   32 scanf: SCANF . LP expr RP
   33      | SCANF . LP STRING COMMA io_list RP

    LP  shift, and go to state 48


State 10

   73 unary_expr: REFERENCE . cast_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    cast_expr     go to state 49
    unary_expr    go to state 45
    postfix_expr  go to state 39
    primary_expr  go to state 40
    paperConst    go to state 41


State 11

    4 statement: SEMICOLON .

    $default  reduce using rule 4 (statement)


State 12

   79 primary_expr: LP . expr RP

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    declaration       go to state 50
    expr              go to state 51
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 13

   19 compound_Stmt: LC . statements RC
   20              | LC . RC

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    PRINTF      shift, and go to state 8
    SCANF       shift, and go to state 9
    REFERENCE   shift, and go to state 10
    SEMICOLON   shift, and go to state 11
    LP          shift, and go to state 12
    LC          shift, and go to state 13
    RC          shift, and go to state 63
    WHILE       shift, and go to state 14
    IF          shift, and go to state 15
    RETURN      shift, and go to state 16
    FOR         shift, and go to state 17
    CONTINUE    shift, and go to state 18
    BREAK       shift, and go to state 19
    IDENTIFIER  shift, and go to state 20
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    statements           go to state 64
    statement            go to state 27
    function_Call        go to state 28
    function_Definition  go to state 29
    compound_Stmt        go to state 30
    if_else              go to state 31
    iteration_Stmt       go to state 32
    jump_Stmt            go to state 33
    printf               go to state 34
    scanf                go to state 35
    declaration          go to state 36
    assignment_expr      go to state 37
    unary_expr           go to state 38
    postfix_expr         go to state 39
    primary_expr         go to state 40
    paperConst           go to state 41
    T                    go to state 42


State 14

   23 iteration_Stmt: WHILE . LP expr RP compound_Stmt

    LP  shift, and go to state 65


State 15

   21 if_else: IF . LP expr RP compound_Stmt
   22        | IF . LP expr RP compound_Stmt ELSE compound_Stmt

    LP  shift, and go to state 66


State 16

   28 jump_Stmt: RETURN . expr SEMICOLON
   29          | RETURN . SEMICOLON

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    SEMICOLON   shift, and go to state 67
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    declaration       go to state 50
    expr              go to state 68
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 17

   24 iteration_Stmt: FOR . LP expr SEMICOLON expr SEMICOLON expr RP compound_Stmt
   25               | FOR . LP expr SEMICOLON expr SEMICOLON RP compound_Stmt

    LP  shift, and go to state 69


State 18

   26 jump_Stmt: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 70


State 19

   27 jump_Stmt: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 71


State 20

   15 function_Call: IDENTIFIER . LP id_list RP
   16              | IDENTIFIER . LP RP
   77 primary_expr: IDENTIFIER .

    LP  shift, and go to state 72

    $default  reduce using rule 77 (primary_expr)


State 21

   80 paperConst: INTEGER .

    $default  reduce using rule 80 (paperConst)


State 22

   81 paperConst: CHAR .

    $default  reduce using rule 81 (paperConst)


State 23

   83 paperConst: BOOL .

    $default  reduce using rule 83 (paperConst)


State 24

   82 paperConst: STRING .

    $default  reduce using rule 82 (paperConst)


State 25

    0 $accept: program . $end

    $end  shift, and go to state 73


State 26

    1 program: statements .
    3 statements: statements . statement

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    PRINTF      shift, and go to state 8
    SCANF       shift, and go to state 9
    REFERENCE   shift, and go to state 10
    SEMICOLON   shift, and go to state 11
    LP          shift, and go to state 12
    LC          shift, and go to state 13
    WHILE       shift, and go to state 14
    IF          shift, and go to state 15
    RETURN      shift, and go to state 16
    FOR         shift, and go to state 17
    CONTINUE    shift, and go to state 18
    BREAK       shift, and go to state 19
    IDENTIFIER  shift, and go to state 20
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    $default  reduce using rule 1 (program)

    statement            go to state 74
    function_Call        go to state 28
    function_Definition  go to state 29
    compound_Stmt        go to state 30
    if_else              go to state 31
    iteration_Stmt       go to state 32
    jump_Stmt            go to state 33
    printf               go to state 34
    scanf                go to state 35
    declaration          go to state 36
    assignment_expr      go to state 37
    unary_expr           go to state 38
    postfix_expr         go to state 39
    primary_expr         go to state 40
    paperConst           go to state 41
    T                    go to state 42


State 27

    2 statements: statement .

    $default  reduce using rule 2 (statements)


State 28

   14 statement: function_Call .

    $default  reduce using rule 14 (statement)


State 29

   13 statement: function_Definition .

    $default  reduce using rule 13 (statement)


State 30

   10 statement: compound_Stmt .

    $default  reduce using rule 10 (statement)


State 31

    7 statement: if_else .

    $default  reduce using rule 7 (statement)


State 32

    8 statement: iteration_Stmt .

    $default  reduce using rule 8 (statement)


State 33

    9 statement: jump_Stmt .

    $default  reduce using rule 9 (statement)


State 34

   11 statement: printf . SEMICOLON

    SEMICOLON  shift, and go to state 75


State 35

   12 statement: scanf . SEMICOLON

    SEMICOLON  shift, and go to state 76


State 36

    5 statement: declaration . SEMICOLON
   37 declaration: declaration . COMMA IDENTIFIER

    SEMICOLON  shift, and go to state 77
    COMMA      shift, and go to state 78


State 37

    6 statement: assignment_expr . SEMICOLON

    SEMICOLON  shift, and go to state 79


State 38

   57 assignment_expr: unary_expr . ASSIGN additive_expr
   58                | unary_expr . ADD_ASSIGN additive_expr
   59                | unary_expr . SUB_ASSIGN additive_expr
   60                | unary_expr . MUL_ASSIGN additive_expr
   61                | unary_expr . DIV_ASSIGN additive_expr

    ASSIGN      shift, and go to state 80
    ADD_ASSIGN  shift, and go to state 81
    SUB_ASSIGN  shift, and go to state 82
    MUL_ASSIGN  shift, and go to state 83
    DIV_ASSIGN  shift, and go to state 84


State 39

   70 unary_expr: postfix_expr .
   75 postfix_expr: postfix_expr . INC
   76             | postfix_expr . DEC

    INC  shift, and go to state 85
    DEC  shift, and go to state 86

    $default  reduce using rule 70 (unary_expr)


State 40

   74 postfix_expr: primary_expr .

    $default  reduce using rule 74 (postfix_expr)


State 41

   78 primary_expr: paperConst .

    $default  reduce using rule 78 (primary_expr)


State 42

   17 function_Definition: T . IDENTIFIER LP declaration RP compound_Stmt
   18                    | T . IDENTIFIER LP RP compound_Stmt
   36 declaration: T . IDENTIFIER ASSIGN additive_expr
   38            | T . IDENTIFIER

    IDENTIFIER  shift, and go to state 87


State 43

   77 primary_expr: IDENTIFIER .

    $default  reduce using rule 77 (primary_expr)


State 44

   71 unary_expr: SUB cast_expr .

    $default  reduce using rule 71 (unary_expr)


State 45

   69 cast_expr: unary_expr .

    $default  reduce using rule 69 (cast_expr)


State 46

   72 unary_expr: NOT cast_expr .

    $default  reduce using rule 72 (unary_expr)


State 47

   30 printf: PRINTF LP . expr RP
   31       | PRINTF LP . STRING COMMA io_list RP

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 88

    declaration       go to state 50
    expr              go to state 89
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 48

   32 scanf: SCANF LP . expr RP
   33      | SCANF LP . STRING COMMA io_list RP

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 90

    declaration       go to state 50
    expr              go to state 91
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 49

   73 unary_expr: REFERENCE cast_expr .

    $default  reduce using rule 73 (unary_expr)


State 50

   37 declaration: declaration . COMMA IDENTIFIER
   43 expr: declaration .

    COMMA  shift, and go to state 78

    COMMA     [reduce using rule 43 (expr)]
    $default  reduce using rule 43 (expr)


State 51

   79 primary_expr: LP expr . RP

    RP  shift, and go to state 92


State 52

   41 expr: condition_expr .

    $default  reduce using rule 41 (expr)


State 53

   44 condition_expr: logical_or_expr .
   46 logical_or_expr: logical_or_expr . OR logical_and_expr

    OR  shift, and go to state 93

    $default  reduce using rule 44 (condition_expr)


State 54

   45 logical_or_expr: logical_and_expr .
   48 logical_and_expr: logical_and_expr . AND equality_expr

    AND  shift, and go to state 94

    $default  reduce using rule 45 (logical_or_expr)


State 55

   47 logical_and_expr: equality_expr .
   50 equality_expr: equality_expr . EQ relation_expr
   51              | equality_expr . NEQ relation_expr

    EQ   shift, and go to state 95
    NEQ  shift, and go to state 96

    $default  reduce using rule 47 (logical_and_expr)


State 56

   49 equality_expr: relation_expr .
   53 relation_expr: relation_expr . LT additive_expr
   54              | relation_expr . LQT additive_expr
   55              | relation_expr . GT additive_expr
   56              | relation_expr . GQT additive_expr

    GQT  shift, and go to state 97
    LQT  shift, and go to state 98
    GT   shift, and go to state 99
    LT   shift, and go to state 100

    $default  reduce using rule 49 (equality_expr)


State 57

   42 expr: assignment_expr .

    $default  reduce using rule 42 (expr)


State 58

   52 relation_expr: additive_expr .
   63 additive_expr: additive_expr . ADD mult_expr
   64              | additive_expr . SUB mult_expr

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 52 (relation_expr)


State 59

   62 additive_expr: mult_expr .
   66 mult_expr: mult_expr . MUL cast_expr
   67          | mult_expr . DIV cast_expr
   68          | mult_expr . MODE cast_expr

    MUL   shift, and go to state 103
    DIV   shift, and go to state 104
    MODE  shift, and go to state 105

    $default  reduce using rule 62 (additive_expr)


State 60

   65 mult_expr: cast_expr .

    $default  reduce using rule 65 (mult_expr)


State 61

   57 assignment_expr: unary_expr . ASSIGN additive_expr
   58                | unary_expr . ADD_ASSIGN additive_expr
   59                | unary_expr . SUB_ASSIGN additive_expr
   60                | unary_expr . MUL_ASSIGN additive_expr
   61                | unary_expr . DIV_ASSIGN additive_expr
   69 cast_expr: unary_expr .

    ASSIGN      shift, and go to state 80
    ADD_ASSIGN  shift, and go to state 81
    SUB_ASSIGN  shift, and go to state 82
    MUL_ASSIGN  shift, and go to state 83
    DIV_ASSIGN  shift, and go to state 84

    $default  reduce using rule 69 (cast_expr)


State 62

   36 declaration: T . IDENTIFIER ASSIGN additive_expr
   38            | T . IDENTIFIER

    IDENTIFIER  shift, and go to state 106


State 63

   20 compound_Stmt: LC RC .

    $default  reduce using rule 20 (compound_Stmt)


State 64

    3 statements: statements . statement
   19 compound_Stmt: LC statements . RC

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    PRINTF      shift, and go to state 8
    SCANF       shift, and go to state 9
    REFERENCE   shift, and go to state 10
    SEMICOLON   shift, and go to state 11
    LP          shift, and go to state 12
    LC          shift, and go to state 13
    RC          shift, and go to state 107
    WHILE       shift, and go to state 14
    IF          shift, and go to state 15
    RETURN      shift, and go to state 16
    FOR         shift, and go to state 17
    CONTINUE    shift, and go to state 18
    BREAK       shift, and go to state 19
    IDENTIFIER  shift, and go to state 20
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    statement            go to state 74
    function_Call        go to state 28
    function_Definition  go to state 29
    compound_Stmt        go to state 30
    if_else              go to state 31
    iteration_Stmt       go to state 32
    jump_Stmt            go to state 33
    printf               go to state 34
    scanf                go to state 35
    declaration          go to state 36
    assignment_expr      go to state 37
    unary_expr           go to state 38
    postfix_expr         go to state 39
    primary_expr         go to state 40
    paperConst           go to state 41
    T                    go to state 42


State 65

   23 iteration_Stmt: WHILE LP . expr RP compound_Stmt

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    declaration       go to state 50
    expr              go to state 108
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 66

   21 if_else: IF LP . expr RP compound_Stmt
   22        | IF LP . expr RP compound_Stmt ELSE compound_Stmt

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    declaration       go to state 50
    expr              go to state 109
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 67

   29 jump_Stmt: RETURN SEMICOLON .

    $default  reduce using rule 29 (jump_Stmt)


State 68

   28 jump_Stmt: RETURN expr . SEMICOLON

    SEMICOLON  shift, and go to state 110


State 69

   24 iteration_Stmt: FOR LP . expr SEMICOLON expr SEMICOLON expr RP compound_Stmt
   25               | FOR LP . expr SEMICOLON expr SEMICOLON RP compound_Stmt

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    declaration       go to state 50
    expr              go to state 111
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 70

   26 jump_Stmt: CONTINUE SEMICOLON .

    $default  reduce using rule 26 (jump_Stmt)


State 71

   27 jump_Stmt: BREAK SEMICOLON .

    $default  reduce using rule 27 (jump_Stmt)


State 72

   15 function_Call: IDENTIFIER LP . id_list RP
   16              | IDENTIFIER LP . RP

    RP          shift, and go to state 112
    IDENTIFIER  shift, and go to state 113

    id_list  go to state 114


State 73

    0 $accept: program $end .

    $default  accept


State 74

    3 statements: statements statement .

    $default  reduce using rule 3 (statements)


State 75

   11 statement: printf SEMICOLON .

    $default  reduce using rule 11 (statement)


State 76

   12 statement: scanf SEMICOLON .

    $default  reduce using rule 12 (statement)


State 77

    5 statement: declaration SEMICOLON .

    $default  reduce using rule 5 (statement)


State 78

   37 declaration: declaration COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 115


State 79

    6 statement: assignment_expr SEMICOLON .

    $default  reduce using rule 6 (statement)


State 80

   57 assignment_expr: unary_expr ASSIGN . additive_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    additive_expr  go to state 116
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 81

   58 assignment_expr: unary_expr ADD_ASSIGN . additive_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    additive_expr  go to state 117
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 82

   59 assignment_expr: unary_expr SUB_ASSIGN . additive_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    additive_expr  go to state 118
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 83

   60 assignment_expr: unary_expr MUL_ASSIGN . additive_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    additive_expr  go to state 119
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 84

   61 assignment_expr: unary_expr DIV_ASSIGN . additive_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    additive_expr  go to state 120
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 85

   75 postfix_expr: postfix_expr INC .

    $default  reduce using rule 75 (postfix_expr)


State 86

   76 postfix_expr: postfix_expr DEC .

    $default  reduce using rule 76 (postfix_expr)


State 87

   17 function_Definition: T IDENTIFIER . LP declaration RP compound_Stmt
   18                    | T IDENTIFIER . LP RP compound_Stmt
   36 declaration: T IDENTIFIER . ASSIGN additive_expr
   38            | T IDENTIFIER .

    ASSIGN  shift, and go to state 121
    LP      shift, and go to state 122

    $default  reduce using rule 38 (declaration)


State 88

   31 printf: PRINTF LP STRING . COMMA io_list RP
   82 paperConst: STRING .

    COMMA  shift, and go to state 123

    $default  reduce using rule 82 (paperConst)


State 89

   30 printf: PRINTF LP expr . RP

    RP  shift, and go to state 124


State 90

   33 scanf: SCANF LP STRING . COMMA io_list RP
   82 paperConst: STRING .

    COMMA  shift, and go to state 125

    $default  reduce using rule 82 (paperConst)


State 91

   32 scanf: SCANF LP expr . RP

    RP  shift, and go to state 126


State 92

   79 primary_expr: LP expr RP .

    $default  reduce using rule 79 (primary_expr)


State 93

   46 logical_or_expr: logical_or_expr OR . logical_and_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    logical_and_expr  go to state 127
    equality_expr     go to state 55
    relation_expr     go to state 56
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 45
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41


State 94

   48 logical_and_expr: logical_and_expr AND . equality_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    equality_expr  go to state 128
    relation_expr  go to state 56
    additive_expr  go to state 58
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 95

   50 equality_expr: equality_expr EQ . relation_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    relation_expr  go to state 129
    additive_expr  go to state 58
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 96

   51 equality_expr: equality_expr NEQ . relation_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    relation_expr  go to state 130
    additive_expr  go to state 58
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 97

   56 relation_expr: relation_expr GQT . additive_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    additive_expr  go to state 131
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 98

   54 relation_expr: relation_expr LQT . additive_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    additive_expr  go to state 132
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 99

   55 relation_expr: relation_expr GT . additive_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    additive_expr  go to state 133
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 100

   53 relation_expr: relation_expr LT . additive_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    additive_expr  go to state 134
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 101

   63 additive_expr: additive_expr ADD . mult_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    mult_expr     go to state 135
    cast_expr     go to state 60
    unary_expr    go to state 45
    postfix_expr  go to state 39
    primary_expr  go to state 40
    paperConst    go to state 41


State 102

   64 additive_expr: additive_expr SUB . mult_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    mult_expr     go to state 136
    cast_expr     go to state 60
    unary_expr    go to state 45
    postfix_expr  go to state 39
    primary_expr  go to state 40
    paperConst    go to state 41


State 103

   66 mult_expr: mult_expr MUL . cast_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    cast_expr     go to state 137
    unary_expr    go to state 45
    postfix_expr  go to state 39
    primary_expr  go to state 40
    paperConst    go to state 41


State 104

   67 mult_expr: mult_expr DIV . cast_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    cast_expr     go to state 138
    unary_expr    go to state 45
    postfix_expr  go to state 39
    primary_expr  go to state 40
    paperConst    go to state 41


State 105

   68 mult_expr: mult_expr MODE . cast_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    cast_expr     go to state 139
    unary_expr    go to state 45
    postfix_expr  go to state 39
    primary_expr  go to state 40
    paperConst    go to state 41


State 106

   36 declaration: T IDENTIFIER . ASSIGN additive_expr
   38            | T IDENTIFIER .

    ASSIGN  shift, and go to state 121

    $default  reduce using rule 38 (declaration)


State 107

   19 compound_Stmt: LC statements RC .

    $default  reduce using rule 19 (compound_Stmt)


State 108

   23 iteration_Stmt: WHILE LP expr . RP compound_Stmt

    RP  shift, and go to state 140


State 109

   21 if_else: IF LP expr . RP compound_Stmt
   22        | IF LP expr . RP compound_Stmt ELSE compound_Stmt

    RP  shift, and go to state 141


State 110

   28 jump_Stmt: RETURN expr SEMICOLON .

    $default  reduce using rule 28 (jump_Stmt)


State 111

   24 iteration_Stmt: FOR LP expr . SEMICOLON expr SEMICOLON expr RP compound_Stmt
   25               | FOR LP expr . SEMICOLON expr SEMICOLON RP compound_Stmt

    SEMICOLON  shift, and go to state 142


State 112

   16 function_Call: IDENTIFIER LP RP .

    $default  reduce using rule 16 (function_Call)


State 113

   39 id_list: IDENTIFIER .

    $default  reduce using rule 39 (id_list)


State 114

   15 function_Call: IDENTIFIER LP id_list . RP
   40 id_list: id_list . COMMA IDENTIFIER

    COMMA  shift, and go to state 143
    RP     shift, and go to state 144


State 115

   37 declaration: declaration COMMA IDENTIFIER .

    $default  reduce using rule 37 (declaration)


State 116

   57 assignment_expr: unary_expr ASSIGN additive_expr .
   63 additive_expr: additive_expr . ADD mult_expr
   64              | additive_expr . SUB mult_expr

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 57 (assignment_expr)


State 117

   58 assignment_expr: unary_expr ADD_ASSIGN additive_expr .
   63 additive_expr: additive_expr . ADD mult_expr
   64              | additive_expr . SUB mult_expr

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 58 (assignment_expr)


State 118

   59 assignment_expr: unary_expr SUB_ASSIGN additive_expr .
   63 additive_expr: additive_expr . ADD mult_expr
   64              | additive_expr . SUB mult_expr

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 59 (assignment_expr)


State 119

   60 assignment_expr: unary_expr MUL_ASSIGN additive_expr .
   63 additive_expr: additive_expr . ADD mult_expr
   64              | additive_expr . SUB mult_expr

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 60 (assignment_expr)


State 120

   61 assignment_expr: unary_expr DIV_ASSIGN additive_expr .
   63 additive_expr: additive_expr . ADD mult_expr
   64              | additive_expr . SUB mult_expr

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 61 (assignment_expr)


State 121

   36 declaration: T IDENTIFIER ASSIGN . additive_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    additive_expr  go to state 145
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 122

   17 function_Definition: T IDENTIFIER LP . declaration RP compound_Stmt
   18                    | T IDENTIFIER LP . RP compound_Stmt

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5
    RP        shift, and go to state 146

    declaration  go to state 147
    T            go to state 62


State 123

   31 printf: PRINTF LP STRING COMMA . io_list RP

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    io_list           go to state 148
    declaration       go to state 50
    expr              go to state 149
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 124

   30 printf: PRINTF LP expr RP .

    $default  reduce using rule 30 (printf)


State 125

   33 scanf: SCANF LP STRING COMMA . io_list RP

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    io_list           go to state 150
    declaration       go to state 50
    expr              go to state 149
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 126

   32 scanf: SCANF LP expr RP .

    $default  reduce using rule 32 (scanf)


State 127

   46 logical_or_expr: logical_or_expr OR logical_and_expr .
   48 logical_and_expr: logical_and_expr . AND equality_expr

    AND  shift, and go to state 94

    $default  reduce using rule 46 (logical_or_expr)


State 128

   48 logical_and_expr: logical_and_expr AND equality_expr .
   50 equality_expr: equality_expr . EQ relation_expr
   51              | equality_expr . NEQ relation_expr

    EQ   shift, and go to state 95
    NEQ  shift, and go to state 96

    $default  reduce using rule 48 (logical_and_expr)


State 129

   50 equality_expr: equality_expr EQ relation_expr .
   53 relation_expr: relation_expr . LT additive_expr
   54              | relation_expr . LQT additive_expr
   55              | relation_expr . GT additive_expr
   56              | relation_expr . GQT additive_expr

    GQT  shift, and go to state 97
    LQT  shift, and go to state 98
    GT   shift, and go to state 99
    LT   shift, and go to state 100

    $default  reduce using rule 50 (equality_expr)


State 130

   51 equality_expr: equality_expr NEQ relation_expr .
   53 relation_expr: relation_expr . LT additive_expr
   54              | relation_expr . LQT additive_expr
   55              | relation_expr . GT additive_expr
   56              | relation_expr . GQT additive_expr

    GQT  shift, and go to state 97
    LQT  shift, and go to state 98
    GT   shift, and go to state 99
    LT   shift, and go to state 100

    $default  reduce using rule 51 (equality_expr)


State 131

   56 relation_expr: relation_expr GQT additive_expr .
   63 additive_expr: additive_expr . ADD mult_expr
   64              | additive_expr . SUB mult_expr

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 56 (relation_expr)


State 132

   54 relation_expr: relation_expr LQT additive_expr .
   63 additive_expr: additive_expr . ADD mult_expr
   64              | additive_expr . SUB mult_expr

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 54 (relation_expr)


State 133

   55 relation_expr: relation_expr GT additive_expr .
   63 additive_expr: additive_expr . ADD mult_expr
   64              | additive_expr . SUB mult_expr

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 55 (relation_expr)


State 134

   53 relation_expr: relation_expr LT additive_expr .
   63 additive_expr: additive_expr . ADD mult_expr
   64              | additive_expr . SUB mult_expr

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 53 (relation_expr)


State 135

   63 additive_expr: additive_expr ADD mult_expr .
   66 mult_expr: mult_expr . MUL cast_expr
   67          | mult_expr . DIV cast_expr
   68          | mult_expr . MODE cast_expr

    MUL   shift, and go to state 103
    DIV   shift, and go to state 104
    MODE  shift, and go to state 105

    $default  reduce using rule 63 (additive_expr)


State 136

   64 additive_expr: additive_expr SUB mult_expr .
   66 mult_expr: mult_expr . MUL cast_expr
   67          | mult_expr . DIV cast_expr
   68          | mult_expr . MODE cast_expr

    MUL   shift, and go to state 103
    DIV   shift, and go to state 104
    MODE  shift, and go to state 105

    $default  reduce using rule 64 (additive_expr)


State 137

   66 mult_expr: mult_expr MUL cast_expr .

    $default  reduce using rule 66 (mult_expr)


State 138

   67 mult_expr: mult_expr DIV cast_expr .

    $default  reduce using rule 67 (mult_expr)


State 139

   68 mult_expr: mult_expr MODE cast_expr .

    $default  reduce using rule 68 (mult_expr)


State 140

   23 iteration_Stmt: WHILE LP expr RP . compound_Stmt

    LC  shift, and go to state 13

    compound_Stmt  go to state 151


State 141

   21 if_else: IF LP expr RP . compound_Stmt
   22        | IF LP expr RP . compound_Stmt ELSE compound_Stmt

    LC  shift, and go to state 13

    compound_Stmt  go to state 152


State 142

   24 iteration_Stmt: FOR LP expr SEMICOLON . expr SEMICOLON expr RP compound_Stmt
   25               | FOR LP expr SEMICOLON . expr SEMICOLON RP compound_Stmt

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    declaration       go to state 50
    expr              go to state 153
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 143

   40 id_list: id_list COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 154


State 144

   15 function_Call: IDENTIFIER LP id_list RP .

    $default  reduce using rule 15 (function_Call)


State 145

   36 declaration: T IDENTIFIER ASSIGN additive_expr .
   63 additive_expr: additive_expr . ADD mult_expr
   64              | additive_expr . SUB mult_expr

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 36 (declaration)


State 146

   18 function_Definition: T IDENTIFIER LP RP . compound_Stmt

    LC  shift, and go to state 13

    compound_Stmt  go to state 155


State 147

   17 function_Definition: T IDENTIFIER LP declaration . RP compound_Stmt
   37 declaration: declaration . COMMA IDENTIFIER

    COMMA  shift, and go to state 78
    RP     shift, and go to state 156


State 148

   31 printf: PRINTF LP STRING COMMA io_list . RP
   35 io_list: io_list . COMMA expr

    COMMA  shift, and go to state 157
    RP     shift, and go to state 158


State 149

   34 io_list: expr .

    $default  reduce using rule 34 (io_list)


State 150

   33 scanf: SCANF LP STRING COMMA io_list . RP
   35 io_list: io_list . COMMA expr

    COMMA  shift, and go to state 157
    RP     shift, and go to state 159


State 151

   23 iteration_Stmt: WHILE LP expr RP compound_Stmt .

    $default  reduce using rule 23 (iteration_Stmt)


State 152

   21 if_else: IF LP expr RP compound_Stmt .
   22        | IF LP expr RP compound_Stmt . ELSE compound_Stmt

    ELSE  shift, and go to state 160

    $default  reduce using rule 21 (if_else)


State 153

   24 iteration_Stmt: FOR LP expr SEMICOLON expr . SEMICOLON expr RP compound_Stmt
   25               | FOR LP expr SEMICOLON expr . SEMICOLON RP compound_Stmt

    SEMICOLON  shift, and go to state 161


State 154

   40 id_list: id_list COMMA IDENTIFIER .

    $default  reduce using rule 40 (id_list)


State 155

   18 function_Definition: T IDENTIFIER LP RP compound_Stmt .

    $default  reduce using rule 18 (function_Definition)


State 156

   17 function_Definition: T IDENTIFIER LP declaration RP . compound_Stmt

    LC  shift, and go to state 13

    compound_Stmt  go to state 162


State 157

   35 io_list: io_list COMMA . expr

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    declaration       go to state 50
    expr              go to state 163
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 158

   31 printf: PRINTF LP STRING COMMA io_list RP .

    $default  reduce using rule 31 (printf)


State 159

   33 scanf: SCANF LP STRING COMMA io_list RP .

    $default  reduce using rule 33 (scanf)


State 160

   22 if_else: IF LP expr RP compound_Stmt ELSE . compound_Stmt

    LC  shift, and go to state 13

    compound_Stmt  go to state 164


State 161

   24 iteration_Stmt: FOR LP expr SEMICOLON expr SEMICOLON . expr RP compound_Stmt
   25               | FOR LP expr SEMICOLON expr SEMICOLON . RP compound_Stmt

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    RP          shift, and go to state 165
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    declaration       go to state 50
    expr              go to state 166
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 162

   17 function_Definition: T IDENTIFIER LP declaration RP compound_Stmt .

    $default  reduce using rule 17 (function_Definition)


State 163

   35 io_list: io_list COMMA expr .

    $default  reduce using rule 35 (io_list)


State 164

   22 if_else: IF LP expr RP compound_Stmt ELSE compound_Stmt .

    $default  reduce using rule 22 (if_else)


State 165

   25 iteration_Stmt: FOR LP expr SEMICOLON expr SEMICOLON RP . compound_Stmt

    LC  shift, and go to state 13

    compound_Stmt  go to state 167


State 166

   24 iteration_Stmt: FOR LP expr SEMICOLON expr SEMICOLON expr . RP compound_Stmt

    RP  shift, and go to state 168


State 167

   25 iteration_Stmt: FOR LP expr SEMICOLON expr SEMICOLON RP compound_Stmt .

    $default  reduce using rule 25 (iteration_Stmt)


State 168

   24 iteration_Stmt: FOR LP expr SEMICOLON expr SEMICOLON expr RP . compound_Stmt

    LC  shift, and go to state 13

    compound_Stmt  go to state 169


State 169

   24 iteration_Stmt: FOR LP expr SEMICOLON expr SEMICOLON expr RP compound_Stmt .

    $default  reduce using rule 24 (iteration_Stmt)
