Terminals unused in grammar

    TRUE
    FALSE
    CONST
    UMINUS
    UADD


State 87 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: statements

    2 statements: statement
    3           | statements statement

    4 statement: SEMICOLON
    5          | declaration SEMICOLON
    6          | assignment_expr SEMICOLON
    7          | if_else
    8          | iteration_Stmt
    9          | jump_Stmt
   10          | compound_Stmt
   11          | printf SEMICOLON
   12          | scanf SEMICOLON
   13          | function_Definition
   14          | function_Call

   15 function_Call: IDENTIFIER LP id_list RP
   16              | IDENTIFIER LP RP

   17 function_Definition: T IDENTIFIER LP declaration RP compound_Stmt
   18                    | T IDENTIFIER LP RP compound_Stmt

   19 compound_Stmt: LC statements RC
   20              | LC RC

   21 if_else: IF LP expr RP compound_Stmt
   22        | IF LP expr RP compound_Stmt ELSE compound_Stmt

   23 iteration_Stmt: WHILE LP expr RP compound_Stmt
   24               | FOR LP expr SEMICOLON expr SEMICOLON expr RP compound_Stmt
   25               | FOR LP expr SEMICOLON expr SEMICOLON RP compound_Stmt
   26               | FOR LP expr SEMICOLON SEMICOLON expr RP compound_Stmt
   27               | FOR LP SEMICOLON expr SEMICOLON expr RP compound_Stmt
   28               | FOR LP expr SEMICOLON SEMICOLON RP compound_Stmt
   29               | FOR LP SEMICOLON SEMICOLON expr RP compound_Stmt
   30               | FOR LP SEMICOLON expr SEMICOLON RP compound_Stmt
   31               | FOR LP SEMICOLON SEMICOLON RP compound_Stmt

   32 jump_Stmt: CONTINUE SEMICOLON
   33          | BREAK SEMICOLON
   34          | RETURN expr SEMICOLON
   35          | RETURN SEMICOLON

   36 printf: PRINTF LP expr RP
   37       | PRINTF LP STRING COMMA io_list RP

   38 scanf: SCANF LP expr RP
   39      | SCANF LP STRING COMMA io_list RP

   40 io_list: expr
   41        | io_list COMMA expr

   42 declaration: T IDENTIFIER ASSIGN additive_expr
   43            | T id_list

   44 id_list: IDENTIFIER
   45        | id_list COMMA IDENTIFIER

   46 expr: condition_expr
   47     | assignment_expr
   48     | declaration

   49 condition_expr: logical_or_expr

   50 logical_or_expr: logical_and_expr
   51                | logical_or_expr OR logical_and_expr

   52 logical_and_expr: equality_expr
   53                 | logical_and_expr AND equality_expr

   54 equality_expr: relation_expr
   55              | equality_expr EQ relation_expr
   56              | equality_expr NEQ relation_expr

   57 relation_expr: additive_expr
   58              | relation_expr LT additive_expr
   59              | relation_expr LQT additive_expr
   60              | relation_expr GT additive_expr
   61              | relation_expr GQT additive_expr

   62 assignment_expr: unary_expr ASSIGN additive_expr
   63                | unary_expr ADD_ASSIGN additive_expr
   64                | unary_expr SUB_ASSIGN additive_expr
   65                | unary_expr MUL_ASSIGN additive_expr
   66                | unary_expr DIV_ASSIGN additive_expr

   67 additive_expr: mult_expr
   68              | additive_expr ADD mult_expr
   69              | additive_expr SUB mult_expr

   70 mult_expr: cast_expr
   71          | mult_expr MUL cast_expr
   72          | mult_expr DIV cast_expr
   73          | mult_expr MODE cast_expr

   74 cast_expr: unary_expr

   75 unary_expr: postfix_expr
   76           | SUB cast_expr
   77           | NOT cast_expr
   78           | REFERENCE cast_expr

   79 postfix_expr: primary_expr
   80             | postfix_expr INC
   81             | postfix_expr DEC

   82 primary_expr: IDENTIFIER
   83             | paperConst
   84             | LP expr RP

   85 paperConst: INTEGER
   86           | CHAR
   87           | STRING
   88           | BOOL

   89 T: T_INT
   90  | T_CHAR
   91  | T_BOOL
   92  | T_STRING
   93  | T_VOID


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    T_CHAR (258) 90
    T_INT (259) 89
    T_STRING (260) 92
    T_BOOL (261) 91
    T_VOID (262) 93
    TRUE (263)
    FALSE (264)
    ASSIGN (265) 42 62
    ADD_ASSIGN (266) 63
    SUB_ASSIGN (267) 64
    MUL_ASSIGN (268) 65
    DIV_ASSIGN (269) 66
    EQ (270) 55
    NEQ (271) 56
    GQT (272) 61
    LQT (273) 59
    GT (274) 60
    LT (275) 58
    ADD (276) 68
    SUB (277) 69 76
    MUL (278) 71
    DIV (279) 72
    MODE (280) 73
    INC (281) 80
    DEC (282) 81
    AND (283) 53
    OR (284) 51
    NOT (285) 77
    PRINTF (286) 36 37
    SCANF (287) 38 39
    REFERENCE (288) 78
    CONST (289)
    SEMICOLON (290) 4 5 6 11 12 24 25 26 27 28 29 30 31 32 33 34 35
    COMMA (291) 37 39 41 45
    LP (292) 15 16 17 18 21 22 23 24 25 26 27 28 29 30 31 36 37 38 39 84
    RP (293) 15 16 17 18 21 22 23 24 25 26 27 28 29 30 31 36 37 38 39 84
    LC (294) 19 20
    RC (295) 19 20
    WHILE (296) 23
    ELSE (297) 22
    IF (298) 21 22
    RETURN (299) 34 35
    FOR (300) 24 25 26 27 28 29 30 31
    CONTINUE (301) 32
    BREAK (302) 33
    IDENTIFIER (303) 15 16 17 18 42 44 45 82
    INTEGER (304) 85
    CHAR (305) 86
    BOOL (306) 88
    STRING (307) 37 39 87
    UMINUS (308)
    UADD (309)
    LOWER_THEN_ELSE (310)


Nonterminals, with rules where they appear

    $accept (56)
        on left: 0
    program (57)
        on left: 1
        on right: 0
    statements (58)
        on left: 2 3
        on right: 1 3 19
    statement (59)
        on left: 4 5 6 7 8 9 10 11 12 13 14
        on right: 2 3
    function_Call (60)
        on left: 15 16
        on right: 14
    function_Definition (61)
        on left: 17 18
        on right: 13
    compound_Stmt (62)
        on left: 19 20
        on right: 10 17 18 21 22 23 24 25 26 27 28 29 30 31
    if_else (63)
        on left: 21 22
        on right: 7
    iteration_Stmt (64)
        on left: 23 24 25 26 27 28 29 30 31
        on right: 8
    jump_Stmt (65)
        on left: 32 33 34 35
        on right: 9
    printf (66)
        on left: 36 37
        on right: 11
    scanf (67)
        on left: 38 39
        on right: 12
    io_list (68)
        on left: 40 41
        on right: 37 39 41
    declaration (69)
        on left: 42 43
        on right: 5 17 48
    id_list (70)
        on left: 44 45
        on right: 15 43 45
    expr (71)
        on left: 46 47 48
        on right: 21 22 23 24 25 26 27 28 29 30 34 36 38 40 41 84
    condition_expr (72)
        on left: 49
        on right: 46
    logical_or_expr (73)
        on left: 50 51
        on right: 49 51
    logical_and_expr (74)
        on left: 52 53
        on right: 50 51 53
    equality_expr (75)
        on left: 54 55 56
        on right: 52 53 55 56
    relation_expr (76)
        on left: 57 58 59 60 61
        on right: 54 55 56 58 59 60 61
    assignment_expr (77)
        on left: 62 63 64 65 66
        on right: 6 47
    additive_expr (78)
        on left: 67 68 69
        on right: 42 57 58 59 60 61 62 63 64 65 66 68 69
    mult_expr (79)
        on left: 70 71 72 73
        on right: 67 68 69 71 72 73
    cast_expr (80)
        on left: 74
        on right: 70 71 72 73 76 77 78
    unary_expr (81)
        on left: 75 76 77 78
        on right: 62 63 64 65 66 74
    postfix_expr (82)
        on left: 79 80 81
        on right: 75 80 81
    primary_expr (83)
        on left: 82 83 84
        on right: 79
    paperConst (84)
        on left: 85 86 87 88
        on right: 83
    T (85)
        on left: 89 90 91 92 93
        on right: 17 18 42 43


State 0

    0 $accept: . program $end

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    PRINTF      shift, and go to state 8
    SCANF       shift, and go to state 9
    REFERENCE   shift, and go to state 10
    SEMICOLON   shift, and go to state 11
    LP          shift, and go to state 12
    LC          shift, and go to state 13
    WHILE       shift, and go to state 14
    IF          shift, and go to state 15
    RETURN      shift, and go to state 16
    FOR         shift, and go to state 17
    CONTINUE    shift, and go to state 18
    BREAK       shift, and go to state 19
    IDENTIFIER  shift, and go to state 20
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    program              go to state 25
    statements           go to state 26
    statement            go to state 27
    function_Call        go to state 28
    function_Definition  go to state 29
    compound_Stmt        go to state 30
    if_else              go to state 31
    iteration_Stmt       go to state 32
    jump_Stmt            go to state 33
    printf               go to state 34
    scanf                go to state 35
    declaration          go to state 36
    assignment_expr      go to state 37
    unary_expr           go to state 38
    postfix_expr         go to state 39
    primary_expr         go to state 40
    paperConst           go to state 41
    T                    go to state 42


State 1

   90 T: T_CHAR .

    $default  reduce using rule 90 (T)


State 2

   89 T: T_INT .

    $default  reduce using rule 89 (T)


State 3

   92 T: T_STRING .

    $default  reduce using rule 92 (T)


State 4

   91 T: T_BOOL .

    $default  reduce using rule 91 (T)


State 5

   93 T: T_VOID .

    $default  reduce using rule 93 (T)


State 6

   76 unary_expr: SUB . cast_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    cast_expr     go to state 44
    unary_expr    go to state 45
    postfix_expr  go to state 39
    primary_expr  go to state 40
    paperConst    go to state 41


State 7

   77 unary_expr: NOT . cast_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    cast_expr     go to state 46
    unary_expr    go to state 45
    postfix_expr  go to state 39
    primary_expr  go to state 40
    paperConst    go to state 41


State 8

   36 printf: PRINTF . LP expr RP
   37       | PRINTF . LP STRING COMMA io_list RP

    LP  shift, and go to state 47


State 9

   38 scanf: SCANF . LP expr RP
   39      | SCANF . LP STRING COMMA io_list RP

    LP  shift, and go to state 48


State 10

   78 unary_expr: REFERENCE . cast_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    cast_expr     go to state 49
    unary_expr    go to state 45
    postfix_expr  go to state 39
    primary_expr  go to state 40
    paperConst    go to state 41


State 11

    4 statement: SEMICOLON .

    $default  reduce using rule 4 (statement)


State 12

   84 primary_expr: LP . expr RP

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    declaration       go to state 50
    expr              go to state 51
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 13

   19 compound_Stmt: LC . statements RC
   20              | LC . RC

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    PRINTF      shift, and go to state 8
    SCANF       shift, and go to state 9
    REFERENCE   shift, and go to state 10
    SEMICOLON   shift, and go to state 11
    LP          shift, and go to state 12
    LC          shift, and go to state 13
    RC          shift, and go to state 63
    WHILE       shift, and go to state 14
    IF          shift, and go to state 15
    RETURN      shift, and go to state 16
    FOR         shift, and go to state 17
    CONTINUE    shift, and go to state 18
    BREAK       shift, and go to state 19
    IDENTIFIER  shift, and go to state 20
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    statements           go to state 64
    statement            go to state 27
    function_Call        go to state 28
    function_Definition  go to state 29
    compound_Stmt        go to state 30
    if_else              go to state 31
    iteration_Stmt       go to state 32
    jump_Stmt            go to state 33
    printf               go to state 34
    scanf                go to state 35
    declaration          go to state 36
    assignment_expr      go to state 37
    unary_expr           go to state 38
    postfix_expr         go to state 39
    primary_expr         go to state 40
    paperConst           go to state 41
    T                    go to state 42


State 14

   23 iteration_Stmt: WHILE . LP expr RP compound_Stmt

    LP  shift, and go to state 65


State 15

   21 if_else: IF . LP expr RP compound_Stmt
   22        | IF . LP expr RP compound_Stmt ELSE compound_Stmt

    LP  shift, and go to state 66


State 16

   34 jump_Stmt: RETURN . expr SEMICOLON
   35          | RETURN . SEMICOLON

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    SEMICOLON   shift, and go to state 67
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    declaration       go to state 50
    expr              go to state 68
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 17

   24 iteration_Stmt: FOR . LP expr SEMICOLON expr SEMICOLON expr RP compound_Stmt
   25               | FOR . LP expr SEMICOLON expr SEMICOLON RP compound_Stmt
   26               | FOR . LP expr SEMICOLON SEMICOLON expr RP compound_Stmt
   27               | FOR . LP SEMICOLON expr SEMICOLON expr RP compound_Stmt
   28               | FOR . LP expr SEMICOLON SEMICOLON RP compound_Stmt
   29               | FOR . LP SEMICOLON SEMICOLON expr RP compound_Stmt
   30               | FOR . LP SEMICOLON expr SEMICOLON RP compound_Stmt
   31               | FOR . LP SEMICOLON SEMICOLON RP compound_Stmt

    LP  shift, and go to state 69


State 18

   32 jump_Stmt: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 70


State 19

   33 jump_Stmt: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 71


State 20

   15 function_Call: IDENTIFIER . LP id_list RP
   16              | IDENTIFIER . LP RP
   82 primary_expr: IDENTIFIER .

    LP  shift, and go to state 72

    $default  reduce using rule 82 (primary_expr)


State 21

   85 paperConst: INTEGER .

    $default  reduce using rule 85 (paperConst)


State 22

   86 paperConst: CHAR .

    $default  reduce using rule 86 (paperConst)


State 23

   88 paperConst: BOOL .

    $default  reduce using rule 88 (paperConst)


State 24

   87 paperConst: STRING .

    $default  reduce using rule 87 (paperConst)


State 25

    0 $accept: program . $end

    $end  shift, and go to state 73


State 26

    1 program: statements .
    3 statements: statements . statement

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    PRINTF      shift, and go to state 8
    SCANF       shift, and go to state 9
    REFERENCE   shift, and go to state 10
    SEMICOLON   shift, and go to state 11
    LP          shift, and go to state 12
    LC          shift, and go to state 13
    WHILE       shift, and go to state 14
    IF          shift, and go to state 15
    RETURN      shift, and go to state 16
    FOR         shift, and go to state 17
    CONTINUE    shift, and go to state 18
    BREAK       shift, and go to state 19
    IDENTIFIER  shift, and go to state 20
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    $default  reduce using rule 1 (program)

    statement            go to state 74
    function_Call        go to state 28
    function_Definition  go to state 29
    compound_Stmt        go to state 30
    if_else              go to state 31
    iteration_Stmt       go to state 32
    jump_Stmt            go to state 33
    printf               go to state 34
    scanf                go to state 35
    declaration          go to state 36
    assignment_expr      go to state 37
    unary_expr           go to state 38
    postfix_expr         go to state 39
    primary_expr         go to state 40
    paperConst           go to state 41
    T                    go to state 42


State 27

    2 statements: statement .

    $default  reduce using rule 2 (statements)


State 28

   14 statement: function_Call .

    $default  reduce using rule 14 (statement)


State 29

   13 statement: function_Definition .

    $default  reduce using rule 13 (statement)


State 30

   10 statement: compound_Stmt .

    $default  reduce using rule 10 (statement)


State 31

    7 statement: if_else .

    $default  reduce using rule 7 (statement)


State 32

    8 statement: iteration_Stmt .

    $default  reduce using rule 8 (statement)


State 33

    9 statement: jump_Stmt .

    $default  reduce using rule 9 (statement)


State 34

   11 statement: printf . SEMICOLON

    SEMICOLON  shift, and go to state 75


State 35

   12 statement: scanf . SEMICOLON

    SEMICOLON  shift, and go to state 76


State 36

    5 statement: declaration . SEMICOLON

    SEMICOLON  shift, and go to state 77


State 37

    6 statement: assignment_expr . SEMICOLON

    SEMICOLON  shift, and go to state 78


State 38

   62 assignment_expr: unary_expr . ASSIGN additive_expr
   63                | unary_expr . ADD_ASSIGN additive_expr
   64                | unary_expr . SUB_ASSIGN additive_expr
   65                | unary_expr . MUL_ASSIGN additive_expr
   66                | unary_expr . DIV_ASSIGN additive_expr

    ASSIGN      shift, and go to state 79
    ADD_ASSIGN  shift, and go to state 80
    SUB_ASSIGN  shift, and go to state 81
    MUL_ASSIGN  shift, and go to state 82
    DIV_ASSIGN  shift, and go to state 83


State 39

   75 unary_expr: postfix_expr .
   80 postfix_expr: postfix_expr . INC
   81             | postfix_expr . DEC

    INC  shift, and go to state 84
    DEC  shift, and go to state 85

    $default  reduce using rule 75 (unary_expr)


State 40

   79 postfix_expr: primary_expr .

    $default  reduce using rule 79 (postfix_expr)


State 41

   83 primary_expr: paperConst .

    $default  reduce using rule 83 (primary_expr)


State 42

   17 function_Definition: T . IDENTIFIER LP declaration RP compound_Stmt
   18                    | T . IDENTIFIER LP RP compound_Stmt
   42 declaration: T . IDENTIFIER ASSIGN additive_expr
   43            | T . id_list

    IDENTIFIER  shift, and go to state 86

    id_list  go to state 87


State 43

   82 primary_expr: IDENTIFIER .

    $default  reduce using rule 82 (primary_expr)


State 44

   76 unary_expr: SUB cast_expr .

    $default  reduce using rule 76 (unary_expr)


State 45

   74 cast_expr: unary_expr .

    $default  reduce using rule 74 (cast_expr)


State 46

   77 unary_expr: NOT cast_expr .

    $default  reduce using rule 77 (unary_expr)


State 47

   36 printf: PRINTF LP . expr RP
   37       | PRINTF LP . STRING COMMA io_list RP

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 88

    declaration       go to state 50
    expr              go to state 89
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 48

   38 scanf: SCANF LP . expr RP
   39      | SCANF LP . STRING COMMA io_list RP

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 90

    declaration       go to state 50
    expr              go to state 91
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 49

   78 unary_expr: REFERENCE cast_expr .

    $default  reduce using rule 78 (unary_expr)


State 50

   48 expr: declaration .

    $default  reduce using rule 48 (expr)


State 51

   84 primary_expr: LP expr . RP

    RP  shift, and go to state 92


State 52

   46 expr: condition_expr .

    $default  reduce using rule 46 (expr)


State 53

   49 condition_expr: logical_or_expr .
   51 logical_or_expr: logical_or_expr . OR logical_and_expr

    OR  shift, and go to state 93

    $default  reduce using rule 49 (condition_expr)


State 54

   50 logical_or_expr: logical_and_expr .
   53 logical_and_expr: logical_and_expr . AND equality_expr

    AND  shift, and go to state 94

    $default  reduce using rule 50 (logical_or_expr)


State 55

   52 logical_and_expr: equality_expr .
   55 equality_expr: equality_expr . EQ relation_expr
   56              | equality_expr . NEQ relation_expr

    EQ   shift, and go to state 95
    NEQ  shift, and go to state 96

    $default  reduce using rule 52 (logical_and_expr)


State 56

   54 equality_expr: relation_expr .
   58 relation_expr: relation_expr . LT additive_expr
   59              | relation_expr . LQT additive_expr
   60              | relation_expr . GT additive_expr
   61              | relation_expr . GQT additive_expr

    GQT  shift, and go to state 97
    LQT  shift, and go to state 98
    GT   shift, and go to state 99
    LT   shift, and go to state 100

    $default  reduce using rule 54 (equality_expr)


State 57

   47 expr: assignment_expr .

    $default  reduce using rule 47 (expr)


State 58

   57 relation_expr: additive_expr .
   68 additive_expr: additive_expr . ADD mult_expr
   69              | additive_expr . SUB mult_expr

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 57 (relation_expr)


State 59

   67 additive_expr: mult_expr .
   71 mult_expr: mult_expr . MUL cast_expr
   72          | mult_expr . DIV cast_expr
   73          | mult_expr . MODE cast_expr

    MUL   shift, and go to state 103
    DIV   shift, and go to state 104
    MODE  shift, and go to state 105

    $default  reduce using rule 67 (additive_expr)


State 60

   70 mult_expr: cast_expr .

    $default  reduce using rule 70 (mult_expr)


State 61

   62 assignment_expr: unary_expr . ASSIGN additive_expr
   63                | unary_expr . ADD_ASSIGN additive_expr
   64                | unary_expr . SUB_ASSIGN additive_expr
   65                | unary_expr . MUL_ASSIGN additive_expr
   66                | unary_expr . DIV_ASSIGN additive_expr
   74 cast_expr: unary_expr .

    ASSIGN      shift, and go to state 79
    ADD_ASSIGN  shift, and go to state 80
    SUB_ASSIGN  shift, and go to state 81
    MUL_ASSIGN  shift, and go to state 82
    DIV_ASSIGN  shift, and go to state 83

    $default  reduce using rule 74 (cast_expr)


State 62

   42 declaration: T . IDENTIFIER ASSIGN additive_expr
   43            | T . id_list

    IDENTIFIER  shift, and go to state 106

    id_list  go to state 87


State 63

   20 compound_Stmt: LC RC .

    $default  reduce using rule 20 (compound_Stmt)


State 64

    3 statements: statements . statement
   19 compound_Stmt: LC statements . RC

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    PRINTF      shift, and go to state 8
    SCANF       shift, and go to state 9
    REFERENCE   shift, and go to state 10
    SEMICOLON   shift, and go to state 11
    LP          shift, and go to state 12
    LC          shift, and go to state 13
    RC          shift, and go to state 107
    WHILE       shift, and go to state 14
    IF          shift, and go to state 15
    RETURN      shift, and go to state 16
    FOR         shift, and go to state 17
    CONTINUE    shift, and go to state 18
    BREAK       shift, and go to state 19
    IDENTIFIER  shift, and go to state 20
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    statement            go to state 74
    function_Call        go to state 28
    function_Definition  go to state 29
    compound_Stmt        go to state 30
    if_else              go to state 31
    iteration_Stmt       go to state 32
    jump_Stmt            go to state 33
    printf               go to state 34
    scanf                go to state 35
    declaration          go to state 36
    assignment_expr      go to state 37
    unary_expr           go to state 38
    postfix_expr         go to state 39
    primary_expr         go to state 40
    paperConst           go to state 41
    T                    go to state 42


State 65

   23 iteration_Stmt: WHILE LP . expr RP compound_Stmt

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    declaration       go to state 50
    expr              go to state 108
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 66

   21 if_else: IF LP . expr RP compound_Stmt
   22        | IF LP . expr RP compound_Stmt ELSE compound_Stmt

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    declaration       go to state 50
    expr              go to state 109
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 67

   35 jump_Stmt: RETURN SEMICOLON .

    $default  reduce using rule 35 (jump_Stmt)


State 68

   34 jump_Stmt: RETURN expr . SEMICOLON

    SEMICOLON  shift, and go to state 110


State 69

   24 iteration_Stmt: FOR LP . expr SEMICOLON expr SEMICOLON expr RP compound_Stmt
   25               | FOR LP . expr SEMICOLON expr SEMICOLON RP compound_Stmt
   26               | FOR LP . expr SEMICOLON SEMICOLON expr RP compound_Stmt
   27               | FOR LP . SEMICOLON expr SEMICOLON expr RP compound_Stmt
   28               | FOR LP . expr SEMICOLON SEMICOLON RP compound_Stmt
   29               | FOR LP . SEMICOLON SEMICOLON expr RP compound_Stmt
   30               | FOR LP . SEMICOLON expr SEMICOLON RP compound_Stmt
   31               | FOR LP . SEMICOLON SEMICOLON RP compound_Stmt

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    SEMICOLON   shift, and go to state 111
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    declaration       go to state 50
    expr              go to state 112
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 70

   32 jump_Stmt: CONTINUE SEMICOLON .

    $default  reduce using rule 32 (jump_Stmt)


State 71

   33 jump_Stmt: BREAK SEMICOLON .

    $default  reduce using rule 33 (jump_Stmt)


State 72

   15 function_Call: IDENTIFIER LP . id_list RP
   16              | IDENTIFIER LP . RP

    RP          shift, and go to state 113
    IDENTIFIER  shift, and go to state 114

    id_list  go to state 115


State 73

    0 $accept: program $end .

    $default  accept


State 74

    3 statements: statements statement .

    $default  reduce using rule 3 (statements)


State 75

   11 statement: printf SEMICOLON .

    $default  reduce using rule 11 (statement)


State 76

   12 statement: scanf SEMICOLON .

    $default  reduce using rule 12 (statement)


State 77

    5 statement: declaration SEMICOLON .

    $default  reduce using rule 5 (statement)


State 78

    6 statement: assignment_expr SEMICOLON .

    $default  reduce using rule 6 (statement)


State 79

   62 assignment_expr: unary_expr ASSIGN . additive_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    additive_expr  go to state 116
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 80

   63 assignment_expr: unary_expr ADD_ASSIGN . additive_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    additive_expr  go to state 117
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 81

   64 assignment_expr: unary_expr SUB_ASSIGN . additive_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    additive_expr  go to state 118
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 82

   65 assignment_expr: unary_expr MUL_ASSIGN . additive_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    additive_expr  go to state 119
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 83

   66 assignment_expr: unary_expr DIV_ASSIGN . additive_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    additive_expr  go to state 120
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 84

   80 postfix_expr: postfix_expr INC .

    $default  reduce using rule 80 (postfix_expr)


State 85

   81 postfix_expr: postfix_expr DEC .

    $default  reduce using rule 81 (postfix_expr)


State 86

   17 function_Definition: T IDENTIFIER . LP declaration RP compound_Stmt
   18                    | T IDENTIFIER . LP RP compound_Stmt
   42 declaration: T IDENTIFIER . ASSIGN additive_expr
   44 id_list: IDENTIFIER .

    ASSIGN  shift, and go to state 121
    LP      shift, and go to state 122

    $default  reduce using rule 44 (id_list)


State 87

   43 declaration: T id_list .
   45 id_list: id_list . COMMA IDENTIFIER

    COMMA  shift, and go to state 123

    COMMA     [reduce using rule 43 (declaration)]
    $default  reduce using rule 43 (declaration)


State 88

   37 printf: PRINTF LP STRING . COMMA io_list RP
   87 paperConst: STRING .

    COMMA  shift, and go to state 124

    $default  reduce using rule 87 (paperConst)


State 89

   36 printf: PRINTF LP expr . RP

    RP  shift, and go to state 125


State 90

   39 scanf: SCANF LP STRING . COMMA io_list RP
   87 paperConst: STRING .

    COMMA  shift, and go to state 126

    $default  reduce using rule 87 (paperConst)


State 91

   38 scanf: SCANF LP expr . RP

    RP  shift, and go to state 127


State 92

   84 primary_expr: LP expr RP .

    $default  reduce using rule 84 (primary_expr)


State 93

   51 logical_or_expr: logical_or_expr OR . logical_and_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    logical_and_expr  go to state 128
    equality_expr     go to state 55
    relation_expr     go to state 56
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 45
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41


State 94

   53 logical_and_expr: logical_and_expr AND . equality_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    equality_expr  go to state 129
    relation_expr  go to state 56
    additive_expr  go to state 58
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 95

   55 equality_expr: equality_expr EQ . relation_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    relation_expr  go to state 130
    additive_expr  go to state 58
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 96

   56 equality_expr: equality_expr NEQ . relation_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    relation_expr  go to state 131
    additive_expr  go to state 58
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 97

   61 relation_expr: relation_expr GQT . additive_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    additive_expr  go to state 132
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 98

   59 relation_expr: relation_expr LQT . additive_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    additive_expr  go to state 133
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 99

   60 relation_expr: relation_expr GT . additive_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    additive_expr  go to state 134
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 100

   58 relation_expr: relation_expr LT . additive_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    additive_expr  go to state 135
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 101

   68 additive_expr: additive_expr ADD . mult_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    mult_expr     go to state 136
    cast_expr     go to state 60
    unary_expr    go to state 45
    postfix_expr  go to state 39
    primary_expr  go to state 40
    paperConst    go to state 41


State 102

   69 additive_expr: additive_expr SUB . mult_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    mult_expr     go to state 137
    cast_expr     go to state 60
    unary_expr    go to state 45
    postfix_expr  go to state 39
    primary_expr  go to state 40
    paperConst    go to state 41


State 103

   71 mult_expr: mult_expr MUL . cast_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    cast_expr     go to state 138
    unary_expr    go to state 45
    postfix_expr  go to state 39
    primary_expr  go to state 40
    paperConst    go to state 41


State 104

   72 mult_expr: mult_expr DIV . cast_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    cast_expr     go to state 139
    unary_expr    go to state 45
    postfix_expr  go to state 39
    primary_expr  go to state 40
    paperConst    go to state 41


State 105

   73 mult_expr: mult_expr MODE . cast_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    cast_expr     go to state 140
    unary_expr    go to state 45
    postfix_expr  go to state 39
    primary_expr  go to state 40
    paperConst    go to state 41


State 106

   42 declaration: T IDENTIFIER . ASSIGN additive_expr
   44 id_list: IDENTIFIER .

    ASSIGN  shift, and go to state 121

    $default  reduce using rule 44 (id_list)


State 107

   19 compound_Stmt: LC statements RC .

    $default  reduce using rule 19 (compound_Stmt)


State 108

   23 iteration_Stmt: WHILE LP expr . RP compound_Stmt

    RP  shift, and go to state 141


State 109

   21 if_else: IF LP expr . RP compound_Stmt
   22        | IF LP expr . RP compound_Stmt ELSE compound_Stmt

    RP  shift, and go to state 142


State 110

   34 jump_Stmt: RETURN expr SEMICOLON .

    $default  reduce using rule 34 (jump_Stmt)


State 111

   27 iteration_Stmt: FOR LP SEMICOLON . expr SEMICOLON expr RP compound_Stmt
   29               | FOR LP SEMICOLON . SEMICOLON expr RP compound_Stmt
   30               | FOR LP SEMICOLON . expr SEMICOLON RP compound_Stmt
   31               | FOR LP SEMICOLON . SEMICOLON RP compound_Stmt

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    SEMICOLON   shift, and go to state 143
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    declaration       go to state 50
    expr              go to state 144
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 112

   24 iteration_Stmt: FOR LP expr . SEMICOLON expr SEMICOLON expr RP compound_Stmt
   25               | FOR LP expr . SEMICOLON expr SEMICOLON RP compound_Stmt
   26               | FOR LP expr . SEMICOLON SEMICOLON expr RP compound_Stmt
   28               | FOR LP expr . SEMICOLON SEMICOLON RP compound_Stmt

    SEMICOLON  shift, and go to state 145


State 113

   16 function_Call: IDENTIFIER LP RP .

    $default  reduce using rule 16 (function_Call)


State 114

   44 id_list: IDENTIFIER .

    $default  reduce using rule 44 (id_list)


State 115

   15 function_Call: IDENTIFIER LP id_list . RP
   45 id_list: id_list . COMMA IDENTIFIER

    COMMA  shift, and go to state 123
    RP     shift, and go to state 146


State 116

   62 assignment_expr: unary_expr ASSIGN additive_expr .
   68 additive_expr: additive_expr . ADD mult_expr
   69              | additive_expr . SUB mult_expr

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 62 (assignment_expr)


State 117

   63 assignment_expr: unary_expr ADD_ASSIGN additive_expr .
   68 additive_expr: additive_expr . ADD mult_expr
   69              | additive_expr . SUB mult_expr

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 63 (assignment_expr)


State 118

   64 assignment_expr: unary_expr SUB_ASSIGN additive_expr .
   68 additive_expr: additive_expr . ADD mult_expr
   69              | additive_expr . SUB mult_expr

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 64 (assignment_expr)


State 119

   65 assignment_expr: unary_expr MUL_ASSIGN additive_expr .
   68 additive_expr: additive_expr . ADD mult_expr
   69              | additive_expr . SUB mult_expr

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 65 (assignment_expr)


State 120

   66 assignment_expr: unary_expr DIV_ASSIGN additive_expr .
   68 additive_expr: additive_expr . ADD mult_expr
   69              | additive_expr . SUB mult_expr

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 66 (assignment_expr)


State 121

   42 declaration: T IDENTIFIER ASSIGN . additive_expr

    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    additive_expr  go to state 147
    mult_expr      go to state 59
    cast_expr      go to state 60
    unary_expr     go to state 45
    postfix_expr   go to state 39
    primary_expr   go to state 40
    paperConst     go to state 41


State 122

   17 function_Definition: T IDENTIFIER LP . declaration RP compound_Stmt
   18                    | T IDENTIFIER LP . RP compound_Stmt

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5
    RP        shift, and go to state 148

    declaration  go to state 149
    T            go to state 62


State 123

   45 id_list: id_list COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 150


State 124

   37 printf: PRINTF LP STRING COMMA . io_list RP

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    io_list           go to state 151
    declaration       go to state 50
    expr              go to state 152
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 125

   36 printf: PRINTF LP expr RP .

    $default  reduce using rule 36 (printf)


State 126

   39 scanf: SCANF LP STRING COMMA . io_list RP

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    io_list           go to state 153
    declaration       go to state 50
    expr              go to state 152
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 127

   38 scanf: SCANF LP expr RP .

    $default  reduce using rule 38 (scanf)


State 128

   51 logical_or_expr: logical_or_expr OR logical_and_expr .
   53 logical_and_expr: logical_and_expr . AND equality_expr

    AND  shift, and go to state 94

    $default  reduce using rule 51 (logical_or_expr)


State 129

   53 logical_and_expr: logical_and_expr AND equality_expr .
   55 equality_expr: equality_expr . EQ relation_expr
   56              | equality_expr . NEQ relation_expr

    EQ   shift, and go to state 95
    NEQ  shift, and go to state 96

    $default  reduce using rule 53 (logical_and_expr)


State 130

   55 equality_expr: equality_expr EQ relation_expr .
   58 relation_expr: relation_expr . LT additive_expr
   59              | relation_expr . LQT additive_expr
   60              | relation_expr . GT additive_expr
   61              | relation_expr . GQT additive_expr

    GQT  shift, and go to state 97
    LQT  shift, and go to state 98
    GT   shift, and go to state 99
    LT   shift, and go to state 100

    $default  reduce using rule 55 (equality_expr)


State 131

   56 equality_expr: equality_expr NEQ relation_expr .
   58 relation_expr: relation_expr . LT additive_expr
   59              | relation_expr . LQT additive_expr
   60              | relation_expr . GT additive_expr
   61              | relation_expr . GQT additive_expr

    GQT  shift, and go to state 97
    LQT  shift, and go to state 98
    GT   shift, and go to state 99
    LT   shift, and go to state 100

    $default  reduce using rule 56 (equality_expr)


State 132

   61 relation_expr: relation_expr GQT additive_expr .
   68 additive_expr: additive_expr . ADD mult_expr
   69              | additive_expr . SUB mult_expr

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 61 (relation_expr)


State 133

   59 relation_expr: relation_expr LQT additive_expr .
   68 additive_expr: additive_expr . ADD mult_expr
   69              | additive_expr . SUB mult_expr

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 59 (relation_expr)


State 134

   60 relation_expr: relation_expr GT additive_expr .
   68 additive_expr: additive_expr . ADD mult_expr
   69              | additive_expr . SUB mult_expr

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 60 (relation_expr)


State 135

   58 relation_expr: relation_expr LT additive_expr .
   68 additive_expr: additive_expr . ADD mult_expr
   69              | additive_expr . SUB mult_expr

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 58 (relation_expr)


State 136

   68 additive_expr: additive_expr ADD mult_expr .
   71 mult_expr: mult_expr . MUL cast_expr
   72          | mult_expr . DIV cast_expr
   73          | mult_expr . MODE cast_expr

    MUL   shift, and go to state 103
    DIV   shift, and go to state 104
    MODE  shift, and go to state 105

    $default  reduce using rule 68 (additive_expr)


State 137

   69 additive_expr: additive_expr SUB mult_expr .
   71 mult_expr: mult_expr . MUL cast_expr
   72          | mult_expr . DIV cast_expr
   73          | mult_expr . MODE cast_expr

    MUL   shift, and go to state 103
    DIV   shift, and go to state 104
    MODE  shift, and go to state 105

    $default  reduce using rule 69 (additive_expr)


State 138

   71 mult_expr: mult_expr MUL cast_expr .

    $default  reduce using rule 71 (mult_expr)


State 139

   72 mult_expr: mult_expr DIV cast_expr .

    $default  reduce using rule 72 (mult_expr)


State 140

   73 mult_expr: mult_expr MODE cast_expr .

    $default  reduce using rule 73 (mult_expr)


State 141

   23 iteration_Stmt: WHILE LP expr RP . compound_Stmt

    LC  shift, and go to state 13

    compound_Stmt  go to state 154


State 142

   21 if_else: IF LP expr RP . compound_Stmt
   22        | IF LP expr RP . compound_Stmt ELSE compound_Stmt

    LC  shift, and go to state 13

    compound_Stmt  go to state 155


State 143

   29 iteration_Stmt: FOR LP SEMICOLON SEMICOLON . expr RP compound_Stmt
   31               | FOR LP SEMICOLON SEMICOLON . RP compound_Stmt

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    RP          shift, and go to state 156
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    declaration       go to state 50
    expr              go to state 157
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 144

   27 iteration_Stmt: FOR LP SEMICOLON expr . SEMICOLON expr RP compound_Stmt
   30               | FOR LP SEMICOLON expr . SEMICOLON RP compound_Stmt

    SEMICOLON  shift, and go to state 158


State 145

   24 iteration_Stmt: FOR LP expr SEMICOLON . expr SEMICOLON expr RP compound_Stmt
   25               | FOR LP expr SEMICOLON . expr SEMICOLON RP compound_Stmt
   26               | FOR LP expr SEMICOLON . SEMICOLON expr RP compound_Stmt
   28               | FOR LP expr SEMICOLON . SEMICOLON RP compound_Stmt

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    SEMICOLON   shift, and go to state 159
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    declaration       go to state 50
    expr              go to state 160
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 146

   15 function_Call: IDENTIFIER LP id_list RP .

    $default  reduce using rule 15 (function_Call)


State 147

   42 declaration: T IDENTIFIER ASSIGN additive_expr .
   68 additive_expr: additive_expr . ADD mult_expr
   69              | additive_expr . SUB mult_expr

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 42 (declaration)


State 148

   18 function_Definition: T IDENTIFIER LP RP . compound_Stmt

    LC  shift, and go to state 13

    compound_Stmt  go to state 161


State 149

   17 function_Definition: T IDENTIFIER LP declaration . RP compound_Stmt

    RP  shift, and go to state 162


State 150

   45 id_list: id_list COMMA IDENTIFIER .

    $default  reduce using rule 45 (id_list)


State 151

   37 printf: PRINTF LP STRING COMMA io_list . RP
   41 io_list: io_list . COMMA expr

    COMMA  shift, and go to state 163
    RP     shift, and go to state 164


State 152

   40 io_list: expr .

    $default  reduce using rule 40 (io_list)


State 153

   39 scanf: SCANF LP STRING COMMA io_list . RP
   41 io_list: io_list . COMMA expr

    COMMA  shift, and go to state 163
    RP     shift, and go to state 165


State 154

   23 iteration_Stmt: WHILE LP expr RP compound_Stmt .

    $default  reduce using rule 23 (iteration_Stmt)


State 155

   21 if_else: IF LP expr RP compound_Stmt .
   22        | IF LP expr RP compound_Stmt . ELSE compound_Stmt

    ELSE  shift, and go to state 166

    $default  reduce using rule 21 (if_else)


State 156

   31 iteration_Stmt: FOR LP SEMICOLON SEMICOLON RP . compound_Stmt

    LC  shift, and go to state 13

    compound_Stmt  go to state 167


State 157

   29 iteration_Stmt: FOR LP SEMICOLON SEMICOLON expr . RP compound_Stmt

    RP  shift, and go to state 168


State 158

   27 iteration_Stmt: FOR LP SEMICOLON expr SEMICOLON . expr RP compound_Stmt
   30               | FOR LP SEMICOLON expr SEMICOLON . RP compound_Stmt

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    RP          shift, and go to state 169
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    declaration       go to state 50
    expr              go to state 170
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 159

   26 iteration_Stmt: FOR LP expr SEMICOLON SEMICOLON . expr RP compound_Stmt
   28               | FOR LP expr SEMICOLON SEMICOLON . RP compound_Stmt

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    RP          shift, and go to state 171
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    declaration       go to state 50
    expr              go to state 172
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 160

   24 iteration_Stmt: FOR LP expr SEMICOLON expr . SEMICOLON expr RP compound_Stmt
   25               | FOR LP expr SEMICOLON expr . SEMICOLON RP compound_Stmt

    SEMICOLON  shift, and go to state 173


State 161

   18 function_Definition: T IDENTIFIER LP RP compound_Stmt .

    $default  reduce using rule 18 (function_Definition)


State 162

   17 function_Definition: T IDENTIFIER LP declaration RP . compound_Stmt

    LC  shift, and go to state 13

    compound_Stmt  go to state 174


State 163

   41 io_list: io_list COMMA . expr

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    declaration       go to state 50
    expr              go to state 175
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 164

   37 printf: PRINTF LP STRING COMMA io_list RP .

    $default  reduce using rule 37 (printf)


State 165

   39 scanf: SCANF LP STRING COMMA io_list RP .

    $default  reduce using rule 39 (scanf)


State 166

   22 if_else: IF LP expr RP compound_Stmt ELSE . compound_Stmt

    LC  shift, and go to state 13

    compound_Stmt  go to state 176


State 167

   31 iteration_Stmt: FOR LP SEMICOLON SEMICOLON RP compound_Stmt .

    $default  reduce using rule 31 (iteration_Stmt)


State 168

   29 iteration_Stmt: FOR LP SEMICOLON SEMICOLON expr RP . compound_Stmt

    LC  shift, and go to state 13

    compound_Stmt  go to state 177


State 169

   30 iteration_Stmt: FOR LP SEMICOLON expr SEMICOLON RP . compound_Stmt

    LC  shift, and go to state 13

    compound_Stmt  go to state 178


State 170

   27 iteration_Stmt: FOR LP SEMICOLON expr SEMICOLON expr . RP compound_Stmt

    RP  shift, and go to state 179


State 171

   28 iteration_Stmt: FOR LP expr SEMICOLON SEMICOLON RP . compound_Stmt

    LC  shift, and go to state 13

    compound_Stmt  go to state 180


State 172

   26 iteration_Stmt: FOR LP expr SEMICOLON SEMICOLON expr . RP compound_Stmt

    RP  shift, and go to state 181


State 173

   24 iteration_Stmt: FOR LP expr SEMICOLON expr SEMICOLON . expr RP compound_Stmt
   25               | FOR LP expr SEMICOLON expr SEMICOLON . RP compound_Stmt

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    SUB         shift, and go to state 6
    NOT         shift, and go to state 7
    REFERENCE   shift, and go to state 10
    LP          shift, and go to state 12
    RP          shift, and go to state 182
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 21
    CHAR        shift, and go to state 22
    BOOL        shift, and go to state 23
    STRING      shift, and go to state 24

    declaration       go to state 50
    expr              go to state 183
    condition_expr    go to state 52
    logical_or_expr   go to state 53
    logical_and_expr  go to state 54
    equality_expr     go to state 55
    relation_expr     go to state 56
    assignment_expr   go to state 57
    additive_expr     go to state 58
    mult_expr         go to state 59
    cast_expr         go to state 60
    unary_expr        go to state 61
    postfix_expr      go to state 39
    primary_expr      go to state 40
    paperConst        go to state 41
    T                 go to state 62


State 174

   17 function_Definition: T IDENTIFIER LP declaration RP compound_Stmt .

    $default  reduce using rule 17 (function_Definition)


State 175

   41 io_list: io_list COMMA expr .

    $default  reduce using rule 41 (io_list)


State 176

   22 if_else: IF LP expr RP compound_Stmt ELSE compound_Stmt .

    $default  reduce using rule 22 (if_else)


State 177

   29 iteration_Stmt: FOR LP SEMICOLON SEMICOLON expr RP compound_Stmt .

    $default  reduce using rule 29 (iteration_Stmt)


State 178

   30 iteration_Stmt: FOR LP SEMICOLON expr SEMICOLON RP compound_Stmt .

    $default  reduce using rule 30 (iteration_Stmt)


State 179

   27 iteration_Stmt: FOR LP SEMICOLON expr SEMICOLON expr RP . compound_Stmt

    LC  shift, and go to state 13

    compound_Stmt  go to state 184


State 180

   28 iteration_Stmt: FOR LP expr SEMICOLON SEMICOLON RP compound_Stmt .

    $default  reduce using rule 28 (iteration_Stmt)


State 181

   26 iteration_Stmt: FOR LP expr SEMICOLON SEMICOLON expr RP . compound_Stmt

    LC  shift, and go to state 13

    compound_Stmt  go to state 185


State 182

   25 iteration_Stmt: FOR LP expr SEMICOLON expr SEMICOLON RP . compound_Stmt

    LC  shift, and go to state 13

    compound_Stmt  go to state 186


State 183

   24 iteration_Stmt: FOR LP expr SEMICOLON expr SEMICOLON expr . RP compound_Stmt

    RP  shift, and go to state 187


State 184

   27 iteration_Stmt: FOR LP SEMICOLON expr SEMICOLON expr RP compound_Stmt .

    $default  reduce using rule 27 (iteration_Stmt)


State 185

   26 iteration_Stmt: FOR LP expr SEMICOLON SEMICOLON expr RP compound_Stmt .

    $default  reduce using rule 26 (iteration_Stmt)


State 186

   25 iteration_Stmt: FOR LP expr SEMICOLON expr SEMICOLON RP compound_Stmt .

    $default  reduce using rule 25 (iteration_Stmt)


State 187

   24 iteration_Stmt: FOR LP expr SEMICOLON expr SEMICOLON expr RP . compound_Stmt

    LC  shift, and go to state 13

    compound_Stmt  go to state 188


State 188

   24 iteration_Stmt: FOR LP expr SEMICOLON expr SEMICOLON expr RP compound_Stmt .

    $default  reduce using rule 24 (iteration_Stmt)
