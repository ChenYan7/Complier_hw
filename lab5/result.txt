main:1
a:2
s:3
a:2
s:3
ch:4
ch:4
a:2
a:2
a:2
a:2
a:2
a:5
a:5
s:3
a:5
s:3
s:3
b:6
b:6
i:7
i:7
b:6
i:7
i:7
lno@0   @0      program    children: [ @1 ]    
lno@2   @1      function    children: [ @2 @3 @4 @8 @11 @14 @17 @20 ]    
lno@2   @2      type    type:void
lno@2   @3      variable    varname:main
lno@3   @4      statement    children: [ @5 @6 @7 ]    stmt:declaration
lno@3   @5      type    type:int
lno@3   @6      variable    varname:a
lno@3   @7      variable    varname:s
lno@4   @8      statement    children: [ @9 @10 ]    stmt:assign
lno@4   @9      variable    varname:a
lno@4   @10      const    type:int
lno@5   @11      statement    children: [ @12 @13 ]    stmt:assign
lno@5   @12      variable    varname:s
lno@5   @13      const    type:int
lno@6   @14      statement    children: [ @15 @16 ]    stmt:declaration
lno@6   @15      type    type:char
lno@6   @16      variable    varname:ch
lno@7   @17      statement    children: [ @18 @19 ]    stmt:scanf
lno@7   @18      const    type:string
lno@7   @19      variable    varname:ch
lno@8   @20      statement    children: [ @21 @39 @42 @45 @48 @51 ]    stmt:while
lno@8   @21      expr    children: [ @22 @29 ]    op:||
lno@8   @22      expr    children: [ @23 @26 ]    op:&&
lno@8   @23      expr    children: [ @24 @25 ]    op:>
lno@8   @24      variable    varname:a
lno@8   @25      const    type:int
lno@8   @26      expr    children: [ @27 @28 ]    op:<=
lno@8   @27      variable    varname:a
lno@8   @28      const    type:int
lno@8   @29      expr    children: [ @30 @35 ]    op:&&
lno@8   @30      expr    children: [ @31 @34 ]    op:==
lno@8   @31      expr    children: [ @32 @33 ]    op:%
lno@8   @32      variable    varname:a
lno@8   @33      const    type:int
lno@8   @34      const    type:int
lno@8   @35      expr    children: [ @36 @38 ]    op:==
lno@8   @36      expr    children: [ @37 ]    op:!
lno@8   @37      variable    varname:a
lno@8   @38      const    type:int
lno@9   @39      statement    children: [ @40 @41 ]    stmt:assign
lno@9   @40      variable    varname:a
lno@9   @41      const    type:int
lno@10   @42      statement    children: [ @43 @44 ]    stmt:declaration
lno@10   @43      type    type:int
lno@10   @44      variable    varname:a
lno@11   @45      statement    children: [ @46 @47 ]    stmt:assign
lno@11   @46      variable    varname:a
lno@11   @47      const    type:int
lno@12   @48      statement    children: [ @49 @50 ]    stmt:assign
lno@12   @49      variable    varname:s
lno@12   @50      variable    varname:a
lno@12   @51      statement    children: [ @52 @56 @59 @62 @65 ]    stmt:if
lno@12   @52      expr    children: [ @53 @55 ]    op:<
lno@12   @53      expr    children: [ @54 ]    op:-
lno@13   @54      variable    varname:s
lno@13   @55      const    type:int
lno@14   @56      statement    children: [ @57 @58 ]    stmt:printf
lno@14   @57      const    type:string
lno@14   @58      variable    varname:s
lno@15   @59      statement    children: [ @60 @61 ]    stmt:declaration
lno@15   @60      type    type:int
lno@15   @61      variable    varname:b
lno@16   @62      statement    children: [ @63 @64 ]    stmt:assign
lno@16   @63      variable    varname:b
lno@16   @64      const    type:int
lno@17   @65      statement    children: [ @66 @70 @73 @75 ]    stmt:for
lno@17   @66      statement    children: [ @67 @68 @69 ]    stmt:declaration
lno@17   @67      type    type:int
lno@17   @68      variable    varname:i
lno@17   @69      const    type:int
lno@17   @70      expr    children: [ @71 @72 ]    op:<
lno@17   @71      variable    varname:i
lno@17   @72      variable    varname:b
lno@17   @73      expr    children: [ @74 ]    op:++
lno@17   @74      variable    varname:i
lno@18   @75      statement    children: [ @76 @77 ]    stmt:printf
lno@18   @76      const    type:string
lno@18   @77      variable    varname:i
