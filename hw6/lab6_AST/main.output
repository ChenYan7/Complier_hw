Terminals unused in grammar

    SWITCH
    CASE
    CONTINUS
    STRING
    CONST
    LBRACK
    RBRACK
    DOT
    COLON
    POT


State 0 conflicts: 2 shift/reduce
State 3 conflicts: 1 shift/reduce
State 9 conflicts: 2 shift/reduce
State 14 conflicts: 2 shift/reduce
State 15 conflicts: 2 shift/reduce
State 16 conflicts: 2 shift/reduce
State 21 conflicts: 2 shift/reduce
State 31 conflicts: 2 shift/reduce
State 32 conflicts: 2 shift/reduce
State 33 conflicts: 2 shift/reduce
State 34 conflicts: 2 shift/reduce
State 35 conflicts: 2 shift/reduce
State 38 conflicts: 2 shift/reduce
State 39 conflicts: 2 shift/reduce, 3 reduce/reduce
State 42 conflicts: 2 shift/reduce
State 49 conflicts: 2 shift/reduce
State 50 conflicts: 2 shift/reduce
State 57 conflicts: 2 shift/reduce
State 58 conflicts: 2 shift/reduce
State 59 conflicts: 2 shift/reduce
State 60 conflicts: 2 shift/reduce
State 61 conflicts: 2 shift/reduce
State 63 conflicts: 5 shift/reduce
State 69 conflicts: 2 shift/reduce, 3 reduce/reduce
State 72 conflicts: 2 shift/reduce, 4 reduce/reduce
State 75 conflicts: 2 shift/reduce
State 80 conflicts: 2 shift/reduce, 3 reduce/reduce
State 93 conflicts: 2 shift/reduce
State 95 conflicts: 1 shift/reduce
State 98 conflicts: 2 shift/reduce, 4 reduce/reduce
State 99 conflicts: 2 shift/reduce, 4 reduce/reduce
State 100 conflicts: 2 shift/reduce
State 101 conflicts: 2 shift/reduce
State 102 conflicts: 2 shift/reduce
State 103 conflicts: 2 shift/reduce
State 104 conflicts: 2 shift/reduce
State 105 conflicts: 2 shift/reduce
State 106 conflicts: 2 shift/reduce
State 110 conflicts: 2 shift/reduce, 3 reduce/reduce
State 128 conflicts: 2 shift/reduce
State 132 conflicts: 2 shift/reduce


Grammar

    0 $accept: program $end

    1 program: statements

    2 statements: statement
    3           | statements statement

    4 statement: declare
    5          | instruction
    6          | if_else
    7          | while
    8          | for
    9          | INT MAIN LPAREN RPAREN compound_stmt

   10 compound_stmt: LBRACE statements RBRACE

   11 if_else: IF bool_statment compound_stmt
   12        | IF bool_statment compound_stmt ELSE compound_stmt
   13        | IF bool_statment compound_stmt ELSE if_else

   14 while: WHILE bool_statment compound_stmt

   15 for: FOR LPAREN for_statment RPAREN compound_stmt

   16 for_statment: declare bool_expr SEMICOLON expr
   17             | expr SEMICOLON bool_expr SEMICOLON expr

   18 bool_statment: LPAREN bool_expr RPAREN

   19 declare: type id_list SEMICOLON

   20 instruction: expr SEMICOLON
   21            | RETURN expr SEMICOLON
   22            | BREAK SEMICOLON
   23            | printf SEMICOLON
   24            | scanf SEMICOLON

   25 id_list: id_list COMMA expr
   26        | expr

   27 printf: PRINTF LPAREN expr RPAREN

   28 scanf: SCANF LPAREN expr RPAREN

   29 bool_expr: TRUE
   30          | FALSE
   31          | expr
   32          | expr EQUAL expr
   33          | expr GT expr
   34          | expr GTE expr
   35          | expr LT expr
   36          | expr LTE expr
   37          | expr NOTEQUAL expr
   38          | NOT bool_expr
   39          | bool_expr LAND bool_expr
   40          | bool_expr LOR bool_expr
   41          | LPAREN bool_expr RPAREN
   42          | %empty

   43 expr: ID
   44     | INTEGER
   45     | ConstStr
   46     | ConstChar
   47     | ConstStr COMMA id_list
   48     | expr ADD expr
   49     | expr SUB expr
   50     | expr MUL expr
   51     | expr DIV expr
   52     | expr MOD expr
   53     | ADD expr
   54     | SUB expr
   55     | ADDRO ID
   56     | ID INC
   57     | ID DEC
   58     | ID ASSIGN expr
   59     | ID AASSIGN expr
   60     | ID MASSIGN expr
   61     | ID SASSIGN expr
   62     | LPAREN expr RPAREN
   63     | %empty

   64 type: INT
   65     | VOID
   66     | CHAR
   67     | BOOL


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ID (258) 43 55 56 57 58 59 60 61
    INTEGER (259) 44
    ConstStr (260) 45 47
    ConstChar (261) 46
    IF (262) 11 12 13
    ELSE (263) 12 13
    WHILE (264) 14
    FOR (265) 15
    SWITCH (266)
    CASE (267)
    MAIN (268) 9
    CONTINUS (269)
    BREAK (270) 22
    RETURN (271) 21
    INT (272) 9 64
    VOID (273) 65
    CHAR (274) 66
    STRING (275)
    BOOL (276) 67
    CONST (277)
    LPAREN (278) 9 15 18 27 28 41 62
    RPAREN (279) 9 15 18 27 28 41 62
    LBRACK (280)
    RBRACK (281)
    LBRACE (282) 10
    RBRACE (283) 10
    SEMICOLON (284) 16 17 19 20 21 22 23 24
    COMMA (285) 25 47
    DOT (286)
    COLON (287)
    POT (288)
    TRUE (289) 29
    FALSE (290) 30
    ASSIGN (291) 58
    AASSIGN (292) 59
    SASSIGN (293) 61
    MASSIGN (294) 60
    ADD (295) 48 53
    SUB (296) 49 54
    MUL (297) 50
    DIV (298) 51
    MOD (299) 52
    EQUAL (300) 32
    NOTEQUAL (301) 37
    GT (302) 33
    GTE (303) 34
    LT (304) 35
    LTE (305) 36
    LAND (306) 39
    LOR (307) 40
    NOT (308) 38
    PRINTF (309) 27
    SCANF (310) 28
    INC (311) 56
    DEC (312) 57
    UMINUS (313)
    ADDRO (314) 55
    SADD (315)
    LOWER_THEN_ELSE (316)


Nonterminals, with rules where they appear

    $accept (62)
        on left: 0
    program (63)
        on left: 1
        on right: 0
    statements (64)
        on left: 2 3
        on right: 1 3 10
    statement (65)
        on left: 4 5 6 7 8 9
        on right: 2 3
    compound_stmt (66)
        on left: 10
        on right: 9 11 12 13 14 15
    if_else (67)
        on left: 11 12 13
        on right: 6 13
    while (68)
        on left: 14
        on right: 7
    for (69)
        on left: 15
        on right: 8
    for_statment (70)
        on left: 16 17
        on right: 15
    bool_statment (71)
        on left: 18
        on right: 11 12 13 14
    declare (72)
        on left: 19
        on right: 4 16
    instruction (73)
        on left: 20 21 22 23 24
        on right: 5
    id_list (74)
        on left: 25 26
        on right: 19 25 47
    printf (75)
        on left: 27
        on right: 23
    scanf (76)
        on left: 28
        on right: 24
    bool_expr (77)
        on left: 29 30 31 32 33 34 35 36 37 38 39 40 41 42
        on right: 16 17 18 38 39 40 41
    expr (78)
        on left: 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63
        on right: 16 17 20 21 25 26 27 28 31 32 33 34 35 36 37 48 49 50 51 52 53 54 58 59 60 61 62
    type (79)
        on left: 64 65 66 67
        on right: 19


State 0

    0 $accept: . program $end

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    IF         shift, and go to state 5
    WHILE      shift, and go to state 6
    FOR        shift, and go to state 7
    BREAK      shift, and go to state 8
    RETURN     shift, and go to state 9
    INT        shift, and go to state 10
    VOID       shift, and go to state 11
    CHAR       shift, and go to state 12
    BOOL       shift, and go to state 13
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    PRINTF     shift, and go to state 17
    SCANF      shift, and go to state 18
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    program      go to state 20
    statements   go to state 21
    statement    go to state 22
    if_else      go to state 23
    while        go to state 24
    for          go to state 25
    declare      go to state 26
    instruction  go to state 27
    printf       go to state 28
    scanf        go to state 29
    expr         go to state 30
    type         go to state 31


State 1

   43 expr: ID .
   56     | ID . INC
   57     | ID . DEC
   58     | ID . ASSIGN expr
   59     | ID . AASSIGN expr
   60     | ID . MASSIGN expr
   61     | ID . SASSIGN expr

    ASSIGN   shift, and go to state 32
    AASSIGN  shift, and go to state 33
    SASSIGN  shift, and go to state 34
    MASSIGN  shift, and go to state 35
    INC      shift, and go to state 36
    DEC      shift, and go to state 37

    $default  reduce using rule 43 (expr)


State 2

   44 expr: INTEGER .

    $default  reduce using rule 44 (expr)


State 3

   45 expr: ConstStr .
   47     | ConstStr . COMMA id_list

    COMMA  shift, and go to state 38

    COMMA     [reduce using rule 45 (expr)]
    $default  reduce using rule 45 (expr)


State 4

   46 expr: ConstChar .

    $default  reduce using rule 46 (expr)


State 5

   11 if_else: IF . bool_statment compound_stmt
   12        | IF . bool_statment compound_stmt ELSE compound_stmt
   13        | IF . bool_statment compound_stmt ELSE if_else

    LPAREN  shift, and go to state 39

    bool_statment  go to state 40


State 6

   14 while: WHILE . bool_statment compound_stmt

    LPAREN  shift, and go to state 39

    bool_statment  go to state 41


State 7

   15 for: FOR . LPAREN for_statment RPAREN compound_stmt

    LPAREN  shift, and go to state 42


State 8

   22 instruction: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 43


State 9

   21 instruction: RETURN . expr SEMICOLON

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    expr  go to state 44


State 10

    9 statement: INT . MAIN LPAREN RPAREN compound_stmt
   64 type: INT .

    MAIN  shift, and go to state 45

    $default  reduce using rule 64 (type)


State 11

   65 type: VOID .

    $default  reduce using rule 65 (type)


State 12

   66 type: CHAR .

    $default  reduce using rule 66 (type)


State 13

   67 type: BOOL .

    $default  reduce using rule 67 (type)


State 14

   62 expr: LPAREN . expr RPAREN

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    expr  go to state 46


State 15

   53 expr: ADD . expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    expr  go to state 47


State 16

   54 expr: SUB . expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    expr  go to state 48


State 17

   27 printf: PRINTF . LPAREN expr RPAREN

    LPAREN  shift, and go to state 49


State 18

   28 scanf: SCANF . LPAREN expr RPAREN

    LPAREN  shift, and go to state 50


State 19

   55 expr: ADDRO . ID

    ID  shift, and go to state 51


State 20

    0 $accept: program . $end

    $end  shift, and go to state 52


State 21

    1 program: statements .
    3 statements: statements . statement

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    IF         shift, and go to state 5
    WHILE      shift, and go to state 6
    FOR        shift, and go to state 7
    BREAK      shift, and go to state 8
    RETURN     shift, and go to state 9
    INT        shift, and go to state 10
    VOID       shift, and go to state 11
    CHAR       shift, and go to state 12
    BOOL       shift, and go to state 13
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    PRINTF     shift, and go to state 17
    SCANF      shift, and go to state 18
    ADDRO      shift, and go to state 19

    $end      reduce using rule 1 (program)
    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    statement    go to state 53
    if_else      go to state 23
    while        go to state 24
    for          go to state 25
    declare      go to state 26
    instruction  go to state 27
    printf       go to state 28
    scanf        go to state 29
    expr         go to state 30
    type         go to state 31


State 22

    2 statements: statement .

    $default  reduce using rule 2 (statements)


State 23

    6 statement: if_else .

    $default  reduce using rule 6 (statement)


State 24

    7 statement: while .

    $default  reduce using rule 7 (statement)


State 25

    8 statement: for .

    $default  reduce using rule 8 (statement)


State 26

    4 statement: declare .

    $default  reduce using rule 4 (statement)


State 27

    5 statement: instruction .

    $default  reduce using rule 5 (statement)


State 28

   23 instruction: printf . SEMICOLON

    SEMICOLON  shift, and go to state 54


State 29

   24 instruction: scanf . SEMICOLON

    SEMICOLON  shift, and go to state 55


State 30

   20 instruction: expr . SEMICOLON
   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr

    SEMICOLON  shift, and go to state 56
    ADD        shift, and go to state 57
    SUB        shift, and go to state 58
    MUL        shift, and go to state 59
    DIV        shift, and go to state 60
    MOD        shift, and go to state 61


State 31

   19 declare: type . id_list SEMICOLON

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    id_list  go to state 62
    expr     go to state 63


State 32

   58 expr: ID ASSIGN . expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    expr  go to state 64


State 33

   59 expr: ID AASSIGN . expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    expr  go to state 65


State 34

   61 expr: ID SASSIGN . expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    expr  go to state 66


State 35

   60 expr: ID MASSIGN . expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    expr  go to state 67


State 36

   56 expr: ID INC .

    $default  reduce using rule 56 (expr)


State 37

   57 expr: ID DEC .

    $default  reduce using rule 57 (expr)


State 38

   47 expr: ConstStr COMMA . id_list

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    id_list  go to state 68
    expr     go to state 63


State 39

   18 bool_statment: LPAREN . bool_expr RPAREN

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 69
    TRUE       shift, and go to state 70
    FALSE      shift, and go to state 71
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    NOT        shift, and go to state 72
    ADDRO      shift, and go to state 19

    RPAREN    reduce using rule 42 (bool_expr)
    RPAREN    [reduce using rule 63 (expr)]
    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    LAND      reduce using rule 42 (bool_expr)
    LAND      [reduce using rule 63 (expr)]
    LOR       reduce using rule 42 (bool_expr)
    LOR       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    bool_expr  go to state 73
    expr       go to state 74


State 40

   11 if_else: IF bool_statment . compound_stmt
   12        | IF bool_statment . compound_stmt ELSE compound_stmt
   13        | IF bool_statment . compound_stmt ELSE if_else

    LBRACE  shift, and go to state 75

    compound_stmt  go to state 76


State 41

   14 while: WHILE bool_statment . compound_stmt

    LBRACE  shift, and go to state 75

    compound_stmt  go to state 77


State 42

   15 for: FOR LPAREN . for_statment RPAREN compound_stmt

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    INT        shift, and go to state 78
    VOID       shift, and go to state 11
    CHAR       shift, and go to state 12
    BOOL       shift, and go to state 13
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    for_statment  go to state 79
    declare       go to state 80
    expr          go to state 81
    type          go to state 31


State 43

   22 instruction: BREAK SEMICOLON .

    $default  reduce using rule 22 (instruction)


State 44

   21 instruction: RETURN expr . SEMICOLON
   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr

    SEMICOLON  shift, and go to state 82
    ADD        shift, and go to state 57
    SUB        shift, and go to state 58
    MUL        shift, and go to state 59
    DIV        shift, and go to state 60
    MOD        shift, and go to state 61


State 45

    9 statement: INT MAIN . LPAREN RPAREN compound_stmt

    LPAREN  shift, and go to state 83


State 46

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   62     | LPAREN expr . RPAREN

    RPAREN  shift, and go to state 84
    ADD     shift, and go to state 57
    SUB     shift, and go to state 58
    MUL     shift, and go to state 59
    DIV     shift, and go to state 60
    MOD     shift, and go to state 61


State 47

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | ADD expr .

    $default  reduce using rule 53 (expr)


State 48

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   54     | SUB expr .

    $default  reduce using rule 54 (expr)


State 49

   27 printf: PRINTF LPAREN . expr RPAREN

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    expr  go to state 85


State 50

   28 scanf: SCANF LPAREN . expr RPAREN

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    expr  go to state 86


State 51

   55 expr: ADDRO ID .

    $default  reduce using rule 55 (expr)


State 52

    0 $accept: program $end .

    $default  accept


State 53

    3 statements: statements statement .

    $default  reduce using rule 3 (statements)


State 54

   23 instruction: printf SEMICOLON .

    $default  reduce using rule 23 (instruction)


State 55

   24 instruction: scanf SEMICOLON .

    $default  reduce using rule 24 (instruction)


State 56

   20 instruction: expr SEMICOLON .

    $default  reduce using rule 20 (instruction)


State 57

   48 expr: expr ADD . expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    expr  go to state 87


State 58

   49 expr: expr SUB . expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    expr  go to state 88


State 59

   50 expr: expr MUL . expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    expr  go to state 89


State 60

   51 expr: expr DIV . expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    expr  go to state 90


State 61

   52 expr: expr MOD . expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    expr  go to state 91


State 62

   19 declare: type id_list . SEMICOLON
   25 id_list: id_list . COMMA expr

    SEMICOLON  shift, and go to state 92
    COMMA      shift, and go to state 93


State 63

   26 id_list: expr .
   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr

    ADD  shift, and go to state 57
    SUB  shift, and go to state 58
    MUL  shift, and go to state 59
    DIV  shift, and go to state 60
    MOD  shift, and go to state 61

    ADD       [reduce using rule 26 (id_list)]
    SUB       [reduce using rule 26 (id_list)]
    MUL       [reduce using rule 26 (id_list)]
    DIV       [reduce using rule 26 (id_list)]
    MOD       [reduce using rule 26 (id_list)]
    $default  reduce using rule 26 (id_list)


State 64

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   58     | ID ASSIGN expr .

    ADD  shift, and go to state 57
    SUB  shift, and go to state 58
    MUL  shift, and go to state 59
    DIV  shift, and go to state 60
    MOD  shift, and go to state 61

    $default  reduce using rule 58 (expr)


State 65

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   59     | ID AASSIGN expr .

    ADD  shift, and go to state 57
    SUB  shift, and go to state 58
    MUL  shift, and go to state 59
    DIV  shift, and go to state 60
    MOD  shift, and go to state 61

    $default  reduce using rule 59 (expr)


State 66

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   61     | ID SASSIGN expr .

    ADD  shift, and go to state 57
    SUB  shift, and go to state 58
    MUL  shift, and go to state 59
    DIV  shift, and go to state 60
    MOD  shift, and go to state 61

    $default  reduce using rule 61 (expr)


State 67

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   60     | ID MASSIGN expr .

    ADD  shift, and go to state 57
    SUB  shift, and go to state 58
    MUL  shift, and go to state 59
    DIV  shift, and go to state 60
    MOD  shift, and go to state 61

    $default  reduce using rule 60 (expr)


State 68

   25 id_list: id_list . COMMA expr
   47 expr: ConstStr COMMA id_list .

    COMMA  shift, and go to state 93

    $default  reduce using rule 47 (expr)


State 69

   41 bool_expr: LPAREN . bool_expr RPAREN
   62 expr: LPAREN . expr RPAREN

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 69
    TRUE       shift, and go to state 70
    FALSE      shift, and go to state 71
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    NOT        shift, and go to state 72
    ADDRO      shift, and go to state 19

    RPAREN    reduce using rule 42 (bool_expr)
    RPAREN    [reduce using rule 63 (expr)]
    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    LAND      reduce using rule 42 (bool_expr)
    LAND      [reduce using rule 63 (expr)]
    LOR       reduce using rule 42 (bool_expr)
    LOR       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    bool_expr  go to state 94
    expr       go to state 95


State 70

   29 bool_expr: TRUE .

    $default  reduce using rule 29 (bool_expr)


State 71

   30 bool_expr: FALSE .

    $default  reduce using rule 30 (bool_expr)


State 72

   38 bool_expr: NOT . bool_expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 69
    TRUE       shift, and go to state 70
    FALSE      shift, and go to state 71
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    NOT        shift, and go to state 72
    ADDRO      shift, and go to state 19

    RPAREN     reduce using rule 42 (bool_expr)
    RPAREN     [reduce using rule 63 (expr)]
    SEMICOLON  reduce using rule 42 (bool_expr)
    SEMICOLON  [reduce using rule 63 (expr)]
    ADD        [reduce using rule 63 (expr)]
    SUB        [reduce using rule 63 (expr)]
    LAND       reduce using rule 42 (bool_expr)
    LAND       [reduce using rule 63 (expr)]
    LOR        reduce using rule 42 (bool_expr)
    LOR        [reduce using rule 63 (expr)]
    $default   reduce using rule 63 (expr)

    bool_expr  go to state 96
    expr       go to state 74


State 73

   18 bool_statment: LPAREN bool_expr . RPAREN
   39 bool_expr: bool_expr . LAND bool_expr
   40          | bool_expr . LOR bool_expr

    RPAREN  shift, and go to state 97
    LAND    shift, and go to state 98
    LOR     shift, and go to state 99


State 74

   31 bool_expr: expr .
   32          | expr . EQUAL expr
   33          | expr . GT expr
   34          | expr . GTE expr
   35          | expr . LT expr
   36          | expr . LTE expr
   37          | expr . NOTEQUAL expr
   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr

    ADD       shift, and go to state 57
    SUB       shift, and go to state 58
    MUL       shift, and go to state 59
    DIV       shift, and go to state 60
    MOD       shift, and go to state 61
    EQUAL     shift, and go to state 100
    NOTEQUAL  shift, and go to state 101
    GT        shift, and go to state 102
    GTE       shift, and go to state 103
    LT        shift, and go to state 104
    LTE       shift, and go to state 105

    $default  reduce using rule 31 (bool_expr)


State 75

   10 compound_stmt: LBRACE . statements RBRACE

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    IF         shift, and go to state 5
    WHILE      shift, and go to state 6
    FOR        shift, and go to state 7
    BREAK      shift, and go to state 8
    RETURN     shift, and go to state 9
    INT        shift, and go to state 10
    VOID       shift, and go to state 11
    CHAR       shift, and go to state 12
    BOOL       shift, and go to state 13
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    PRINTF     shift, and go to state 17
    SCANF      shift, and go to state 18
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    statements   go to state 106
    statement    go to state 22
    if_else      go to state 23
    while        go to state 24
    for          go to state 25
    declare      go to state 26
    instruction  go to state 27
    printf       go to state 28
    scanf        go to state 29
    expr         go to state 30
    type         go to state 31


State 76

   11 if_else: IF bool_statment compound_stmt .
   12        | IF bool_statment compound_stmt . ELSE compound_stmt
   13        | IF bool_statment compound_stmt . ELSE if_else

    ELSE  shift, and go to state 107

    $default  reduce using rule 11 (if_else)


State 77

   14 while: WHILE bool_statment compound_stmt .

    $default  reduce using rule 14 (while)


State 78

   64 type: INT .

    $default  reduce using rule 64 (type)


State 79

   15 for: FOR LPAREN for_statment . RPAREN compound_stmt

    RPAREN  shift, and go to state 108


State 80

   16 for_statment: declare . bool_expr SEMICOLON expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 69
    TRUE       shift, and go to state 70
    FALSE      shift, and go to state 71
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    NOT        shift, and go to state 72
    ADDRO      shift, and go to state 19

    SEMICOLON  reduce using rule 42 (bool_expr)
    SEMICOLON  [reduce using rule 63 (expr)]
    ADD        [reduce using rule 63 (expr)]
    SUB        [reduce using rule 63 (expr)]
    LAND       reduce using rule 42 (bool_expr)
    LAND       [reduce using rule 63 (expr)]
    LOR        reduce using rule 42 (bool_expr)
    LOR        [reduce using rule 63 (expr)]
    $default   reduce using rule 63 (expr)

    bool_expr  go to state 109
    expr       go to state 74


State 81

   17 for_statment: expr . SEMICOLON bool_expr SEMICOLON expr
   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr

    SEMICOLON  shift, and go to state 110
    ADD        shift, and go to state 57
    SUB        shift, and go to state 58
    MUL        shift, and go to state 59
    DIV        shift, and go to state 60
    MOD        shift, and go to state 61


State 82

   21 instruction: RETURN expr SEMICOLON .

    $default  reduce using rule 21 (instruction)


State 83

    9 statement: INT MAIN LPAREN . RPAREN compound_stmt

    RPAREN  shift, and go to state 111


State 84

   62 expr: LPAREN expr RPAREN .

    $default  reduce using rule 62 (expr)


State 85

   27 printf: PRINTF LPAREN expr . RPAREN
   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr

    RPAREN  shift, and go to state 112
    ADD     shift, and go to state 57
    SUB     shift, and go to state 58
    MUL     shift, and go to state 59
    DIV     shift, and go to state 60
    MOD     shift, and go to state 61


State 86

   28 scanf: SCANF LPAREN expr . RPAREN
   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr

    RPAREN  shift, and go to state 113
    ADD     shift, and go to state 57
    SUB     shift, and go to state 58
    MUL     shift, and go to state 59
    DIV     shift, and go to state 60
    MOD     shift, and go to state 61


State 87

   48 expr: expr . ADD expr
   48     | expr ADD expr .
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr

    MUL  shift, and go to state 59
    DIV  shift, and go to state 60
    MOD  shift, and go to state 61

    $default  reduce using rule 48 (expr)


State 88

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   49     | expr SUB expr .
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr

    MUL  shift, and go to state 59
    DIV  shift, and go to state 60
    MOD  shift, and go to state 61

    $default  reduce using rule 49 (expr)


State 89

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   50     | expr MUL expr .
   51     | expr . DIV expr
   52     | expr . MOD expr

    $default  reduce using rule 50 (expr)


State 90

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   51     | expr DIV expr .
   52     | expr . MOD expr

    $default  reduce using rule 51 (expr)


State 91

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   52     | expr MOD expr .

    $default  reduce using rule 52 (expr)


State 92

   19 declare: type id_list SEMICOLON .

    $default  reduce using rule 19 (declare)


State 93

   25 id_list: id_list COMMA . expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    expr  go to state 114


State 94

   39 bool_expr: bool_expr . LAND bool_expr
   40          | bool_expr . LOR bool_expr
   41          | LPAREN bool_expr . RPAREN

    RPAREN  shift, and go to state 115
    LAND    shift, and go to state 98
    LOR     shift, and go to state 99


State 95

   31 bool_expr: expr .
   32          | expr . EQUAL expr
   33          | expr . GT expr
   34          | expr . GTE expr
   35          | expr . LT expr
   36          | expr . LTE expr
   37          | expr . NOTEQUAL expr
   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   62     | LPAREN expr . RPAREN

    RPAREN    shift, and go to state 84
    ADD       shift, and go to state 57
    SUB       shift, and go to state 58
    MUL       shift, and go to state 59
    DIV       shift, and go to state 60
    MOD       shift, and go to state 61
    EQUAL     shift, and go to state 100
    NOTEQUAL  shift, and go to state 101
    GT        shift, and go to state 102
    GTE       shift, and go to state 103
    LT        shift, and go to state 104
    LTE       shift, and go to state 105

    RPAREN    [reduce using rule 31 (bool_expr)]
    $default  reduce using rule 31 (bool_expr)


State 96

   38 bool_expr: NOT bool_expr .
   39          | bool_expr . LAND bool_expr
   40          | bool_expr . LOR bool_expr

    $default  reduce using rule 38 (bool_expr)


State 97

   18 bool_statment: LPAREN bool_expr RPAREN .

    $default  reduce using rule 18 (bool_statment)


State 98

   39 bool_expr: bool_expr LAND . bool_expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 69
    TRUE       shift, and go to state 70
    FALSE      shift, and go to state 71
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    NOT        shift, and go to state 72
    ADDRO      shift, and go to state 19

    RPAREN     reduce using rule 42 (bool_expr)
    RPAREN     [reduce using rule 63 (expr)]
    SEMICOLON  reduce using rule 42 (bool_expr)
    SEMICOLON  [reduce using rule 63 (expr)]
    ADD        [reduce using rule 63 (expr)]
    SUB        [reduce using rule 63 (expr)]
    LAND       reduce using rule 42 (bool_expr)
    LAND       [reduce using rule 63 (expr)]
    LOR        reduce using rule 42 (bool_expr)
    LOR        [reduce using rule 63 (expr)]
    $default   reduce using rule 63 (expr)

    bool_expr  go to state 116
    expr       go to state 74


State 99

   40 bool_expr: bool_expr LOR . bool_expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 69
    TRUE       shift, and go to state 70
    FALSE      shift, and go to state 71
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    NOT        shift, and go to state 72
    ADDRO      shift, and go to state 19

    RPAREN     reduce using rule 42 (bool_expr)
    RPAREN     [reduce using rule 63 (expr)]
    SEMICOLON  reduce using rule 42 (bool_expr)
    SEMICOLON  [reduce using rule 63 (expr)]
    ADD        [reduce using rule 63 (expr)]
    SUB        [reduce using rule 63 (expr)]
    LAND       reduce using rule 42 (bool_expr)
    LAND       [reduce using rule 63 (expr)]
    LOR        reduce using rule 42 (bool_expr)
    LOR        [reduce using rule 63 (expr)]
    $default   reduce using rule 63 (expr)

    bool_expr  go to state 117
    expr       go to state 74


State 100

   32 bool_expr: expr EQUAL . expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    expr  go to state 118


State 101

   37 bool_expr: expr NOTEQUAL . expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    expr  go to state 119


State 102

   33 bool_expr: expr GT . expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    expr  go to state 120


State 103

   34 bool_expr: expr GTE . expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    expr  go to state 121


State 104

   35 bool_expr: expr LT . expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    expr  go to state 122


State 105

   36 bool_expr: expr LTE . expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    expr  go to state 123


State 106

    3 statements: statements . statement
   10 compound_stmt: LBRACE statements . RBRACE

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    IF         shift, and go to state 5
    WHILE      shift, and go to state 6
    FOR        shift, and go to state 7
    BREAK      shift, and go to state 8
    RETURN     shift, and go to state 9
    INT        shift, and go to state 10
    VOID       shift, and go to state 11
    CHAR       shift, and go to state 12
    BOOL       shift, and go to state 13
    LPAREN     shift, and go to state 14
    RBRACE     shift, and go to state 124
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    PRINTF     shift, and go to state 17
    SCANF      shift, and go to state 18
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    statement    go to state 53
    if_else      go to state 23
    while        go to state 24
    for          go to state 25
    declare      go to state 26
    instruction  go to state 27
    printf       go to state 28
    scanf        go to state 29
    expr         go to state 30
    type         go to state 31


State 107

   12 if_else: IF bool_statment compound_stmt ELSE . compound_stmt
   13        | IF bool_statment compound_stmt ELSE . if_else

    IF      shift, and go to state 5
    LBRACE  shift, and go to state 75

    compound_stmt  go to state 125
    if_else        go to state 126


State 108

   15 for: FOR LPAREN for_statment RPAREN . compound_stmt

    LBRACE  shift, and go to state 75

    compound_stmt  go to state 127


State 109

   16 for_statment: declare bool_expr . SEMICOLON expr
   39 bool_expr: bool_expr . LAND bool_expr
   40          | bool_expr . LOR bool_expr

    SEMICOLON  shift, and go to state 128
    LAND       shift, and go to state 98
    LOR        shift, and go to state 99


State 110

   17 for_statment: expr SEMICOLON . bool_expr SEMICOLON expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 69
    TRUE       shift, and go to state 70
    FALSE      shift, and go to state 71
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    NOT        shift, and go to state 72
    ADDRO      shift, and go to state 19

    SEMICOLON  reduce using rule 42 (bool_expr)
    SEMICOLON  [reduce using rule 63 (expr)]
    ADD        [reduce using rule 63 (expr)]
    SUB        [reduce using rule 63 (expr)]
    LAND       reduce using rule 42 (bool_expr)
    LAND       [reduce using rule 63 (expr)]
    LOR        reduce using rule 42 (bool_expr)
    LOR        [reduce using rule 63 (expr)]
    $default   reduce using rule 63 (expr)

    bool_expr  go to state 129
    expr       go to state 74


State 111

    9 statement: INT MAIN LPAREN RPAREN . compound_stmt

    LBRACE  shift, and go to state 75

    compound_stmt  go to state 130


State 112

   27 printf: PRINTF LPAREN expr RPAREN .

    $default  reduce using rule 27 (printf)


State 113

   28 scanf: SCANF LPAREN expr RPAREN .

    $default  reduce using rule 28 (scanf)


State 114

   25 id_list: id_list COMMA expr .
   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr

    ADD  shift, and go to state 57
    SUB  shift, and go to state 58
    MUL  shift, and go to state 59
    DIV  shift, and go to state 60
    MOD  shift, and go to state 61

    $default  reduce using rule 25 (id_list)


State 115

   41 bool_expr: LPAREN bool_expr RPAREN .

    $default  reduce using rule 41 (bool_expr)


State 116

   39 bool_expr: bool_expr . LAND bool_expr
   39          | bool_expr LAND bool_expr .
   40          | bool_expr . LOR bool_expr

    $default  reduce using rule 39 (bool_expr)


State 117

   39 bool_expr: bool_expr . LAND bool_expr
   40          | bool_expr . LOR bool_expr
   40          | bool_expr LOR bool_expr .

    $default  reduce using rule 40 (bool_expr)


State 118

   32 bool_expr: expr EQUAL expr .
   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr

    ADD  shift, and go to state 57
    SUB  shift, and go to state 58
    MUL  shift, and go to state 59
    DIV  shift, and go to state 60
    MOD  shift, and go to state 61

    $default  reduce using rule 32 (bool_expr)


State 119

   37 bool_expr: expr NOTEQUAL expr .
   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr

    ADD  shift, and go to state 57
    SUB  shift, and go to state 58
    MUL  shift, and go to state 59
    DIV  shift, and go to state 60
    MOD  shift, and go to state 61

    $default  reduce using rule 37 (bool_expr)


State 120

   33 bool_expr: expr GT expr .
   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr

    ADD  shift, and go to state 57
    SUB  shift, and go to state 58
    MUL  shift, and go to state 59
    DIV  shift, and go to state 60
    MOD  shift, and go to state 61

    $default  reduce using rule 33 (bool_expr)


State 121

   34 bool_expr: expr GTE expr .
   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr

    ADD  shift, and go to state 57
    SUB  shift, and go to state 58
    MUL  shift, and go to state 59
    DIV  shift, and go to state 60
    MOD  shift, and go to state 61

    $default  reduce using rule 34 (bool_expr)


State 122

   35 bool_expr: expr LT expr .
   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr

    ADD  shift, and go to state 57
    SUB  shift, and go to state 58
    MUL  shift, and go to state 59
    DIV  shift, and go to state 60
    MOD  shift, and go to state 61

    $default  reduce using rule 35 (bool_expr)


State 123

   36 bool_expr: expr LTE expr .
   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr

    ADD  shift, and go to state 57
    SUB  shift, and go to state 58
    MUL  shift, and go to state 59
    DIV  shift, and go to state 60
    MOD  shift, and go to state 61

    $default  reduce using rule 36 (bool_expr)


State 124

   10 compound_stmt: LBRACE statements RBRACE .

    $default  reduce using rule 10 (compound_stmt)


State 125

   12 if_else: IF bool_statment compound_stmt ELSE compound_stmt .

    $default  reduce using rule 12 (if_else)


State 126

   13 if_else: IF bool_statment compound_stmt ELSE if_else .

    $default  reduce using rule 13 (if_else)


State 127

   15 for: FOR LPAREN for_statment RPAREN compound_stmt .

    $default  reduce using rule 15 (for)


State 128

   16 for_statment: declare bool_expr SEMICOLON . expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    expr  go to state 131


State 129

   17 for_statment: expr SEMICOLON bool_expr . SEMICOLON expr
   39 bool_expr: bool_expr . LAND bool_expr
   40          | bool_expr . LOR bool_expr

    SEMICOLON  shift, and go to state 132
    LAND       shift, and go to state 98
    LOR        shift, and go to state 99


State 130

    9 statement: INT MAIN LPAREN RPAREN compound_stmt .

    $default  reduce using rule 9 (statement)


State 131

   16 for_statment: declare bool_expr SEMICOLON expr .
   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr

    ADD  shift, and go to state 57
    SUB  shift, and go to state 58
    MUL  shift, and go to state 59
    DIV  shift, and go to state 60
    MOD  shift, and go to state 61

    $default  reduce using rule 16 (for_statment)


State 132

   17 for_statment: expr SEMICOLON bool_expr SEMICOLON . expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    ConstStr   shift, and go to state 3
    ConstChar  shift, and go to state 4
    LPAREN     shift, and go to state 14
    ADD        shift, and go to state 15
    SUB        shift, and go to state 16
    ADDRO      shift, and go to state 19

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    expr  go to state 133


State 133

   17 for_statment: expr SEMICOLON bool_expr SEMICOLON expr .
   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr

    ADD  shift, and go to state 57
    SUB  shift, and go to state 58
    MUL  shift, and go to state 59
    DIV  shift, and go to state 60
    MOD  shift, and go to state 61

    $default  reduce using rule 17 (for_statment)
